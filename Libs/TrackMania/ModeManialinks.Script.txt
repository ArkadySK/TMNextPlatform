/// PAUSE MENUS
Text PauseMenu()	{
	return """<manialink version="3">
	<stylesheet>
		<style id="buttonResume buttonExit ButtonNextMap ButtonRestartMap ButtonOpponents ButtonRankings ButtonMapInfo ButtonShowSkins QUITgame" textcolor="FFFFFFE7" focusareacolor2="2E2E2ECB" focusareacolor1="2E2E2ECB" sizen="55 17" style="CardButtonSmallXXXL" scale="1"/>
		</stylesheet>
	<frame z-index="100">
	
		<quad pos="0 -96" z-index="-50" size="320 200" halign="center" valign="bottom" bgcolor="1C1C1C5C" style="Bgs1" substyle="BgGradBottom" scriptevents="1" opacity=".4"/>
		
		<frame id="LockFrame" pos="0 0" z-index="90" hidden="1">
			<quad pos="0 -1" z-index="1" size="165 30" halign="center" valign="center" id="bg00" style="Bgs1" substyle="BgDialogBlur"/>
			
			<label  z-index="3" size="150 12.8" pos="-75 9.49" translate="1" autonewline="1" id="LockR" text="Locked" textsize="2.5"/>		
			
			<label pos="0 -10.5" z-index="2" size="50 8" text="Close" halign="center" translate="1" id="ZamocekZrus" scriptevents="1" valign="center" style="CardButtonMediumXL"/>
			<quad pos="0 0" z-index="0" size="400 200" halign="center" valign="center" scriptevents="1" style="Bgs1" substyle="BgEmpty"/>
		</frame>
	
		<frame id="HideOpt" z-index="20" pos="0 25" scale="1.2">
			
					
				
			<frame pos="0 -10" scale=".85" id="menubuttons">	
					
				<label pos="0 19" z-index="0" size="119 7" text="Race menu" style="TextRankingsBig" translate="1" halign="center" textsize="3" valign="center"/>
				<quad pos="0 -46" z-index="-5" size="120 70" bgcolor="FFFA" style="Bgs1" substyle="BgDialogBlur" halign="center" valign="bottom"/>	
				<quad pos="0 27" z-index="-3" size="126 15" bgcolor="FFFA" halign="center" style="Bgs1" substyle="BgGlow2"/>	
				
				<label id="buttonResume" text="Continue" posn="-30 -38" translate="1" valign="center2" z-index="2" textsize="4" scriptevents="1" halign="center"  style="CardButtonMediumL" scale="1.1"/>	
					
				<label id="ButtonRestartMap" text="Restart" pos="0 -13" halign="center" valign="center2" textsize="4" translate="1" scriptevents="1"/>	
				<label id="ButtonOpponents" hidden="1" text="Select Opponents" pos="0 -6" halign="center" valign="center2" textsize="4" translate="1" scriptevents="1"/>	
					
				<label id="ButtonMapInfo" text="Information" pos="0 1" halign="center" valign="center2" textsize="4" translate="1" scriptevents="1"/>	
				
				<label text="Leave" textsize="4" translate="1" id="buttonExit" scriptevents="1" z-index="10" halign="center" valign="center2" focusareacolor1="DD4646CF" pos="30 -38" style="CardButtonMediumL" scale="1.1"/>
			</frame>	
		</frame>
	</frame>
	<script><!--
	#Include "TextLib" as TextLib
	#Include "MathLib" as MathLib
	#Include "AnimLib" as AnimLib
	declare Integer i;
	declare Integer maxi;
	declare CMlFrame Buttons;
	declare Text[] ButtonNames;
	
	Void ResumePlay()	{
		i=0;
		CloseInGameMenu(CMlScriptIngame::EInGameMenuResult::Resume);
		Audio.PlaySoundEvent(CAudioManager::ELibSound::HideDialog, 0, 1.);
	}
	
	Void FocusButton(Integer _i)	{
		declare ButtonName = ButtonNames[_i];
		(Page.GetFirstChild(ButtonName) as CMlLabel).Focus();
		log(ButtonName);
	
	}
	
	Void MoveRight()	{
	
		if(!Page.GetFirstChild("LockFrame").Visible)	{
			if(i!=maxi)	{
				i += 1;
			}
			else
				i = 0;
		}
		FocusButton(i);
	}
	
	Void MoveLeft()	{
		
		if(!Page.GetFirstChild("LockFrame").Visible)	{
			if(i!=0)	{
				i -= 1;
			}
			else
				i = ButtonNames.count -1;
		}
		FocusButton(i);
	}
	
	Void ShowMessage(Text _Msg)	{
			log(_Msg);
	}
		
	main()	{		
		declare Boolean Escape = False;
		i = 0; //index
		declare TimerRequest = Now - 10000;
		declare LatestClick = "";
		ButtonNames = ["buttonResume", "buttonExit", "ButtonMapInfo", /*"ButtonOpponents",*/ "ButtonRestartMap"];
				
		maxi = ButtonNames.count - 1;
		declare netwrite Boolean RestartMap for UI;
		
		declare Text UIState for LocalUser;
		UIState = "InGame";
		
		
		wait(Players.count != 0);
		declare netwrite Boolean ShowOpponents for UI;
	
		EnableMenuNavigation(True,False,Null,50);
	
		while(True) {
			if(LatestClick!="")	{
				UIState = "InGame";
				switch(LatestClick)	{
					case "buttonResume":	{
						ResumePlay();
					}
					case "ButtonRestartMap":	{
						RestartMap = True;
						ResumePlay();
					}
					case "ButtonOpponents":	{
						ResumePlay();
					}
					case "ButtonMapInfo":	{
						ShowCurChallengeCard();
						ResumePlay();
					}
					case "buttonExit":	{	
						Audio.ClearAllDelayedSoundsEvents();
						CloseInGameMenu(CMlScriptIngame::EInGameMenuResult::Quit);
						}
					}
					LatestClick = "";
				}
			
			
				foreach(Event,PendingEvents) {
					switch(Event.Type) {
						
						case CMlEvent::Type::MenuNavigation: {
							if(Event.MenuNavAction == CMlEvent::EMenuNavAction::Cancel) {
								ResumePlay();
							}
							if(Event.MenuNavAction == CMlEvent::EMenuNavAction::Right || Event.MenuNavAction == CMlEvent::EMenuNavAction::Down)	{
								MoveRight();	
							}
							if(Event.MenuNavAction == CMlEvent::EMenuNavAction::Left || Event.MenuNavAction == CMlEvent::EMenuNavAction::Up)	{
								MoveLeft();
							}
							if(Event.MenuNavAction == CMlEvent::EMenuNavAction::Select)	{
								LatestClick = ButtonNames[i];									
							}
						}
						case CMlEvent::Type::MouseClick: {
							if(ButtonNames.exists(Event.ControlId)) {
								LatestClick = Event.ControlId;
							}
							else	{
								if (Event.ControlId == "Right")	{
									MoveRight();
								}
								if (Event.ControlId == "Left")	{
									MoveLeft();
								}
							}
						}
					}
				}
				yield;
			}
		}
		-->
	</script>
	</manialink>""";
}





/// Boost / Freewheel / Special UI
Text DrawGameplayTextUI()	{
    return """<manialink version="3">
    
    <label id="boosterLabel" text="" translate="1" textemboss="1" halign="center" textsize="4" pos="0 60"/>
    
    <script><!--
    
    CSmPlayer GetOwner() {
        wait(GUIPlayer != Null || InputPlayer != Null);
        if (GUIPlayer != Null) return GUIPlayer;
        return InputPlayer;
    }
    
    Void SetBoosterLabelText(Text _Text)	{
        (Page.GetFirstChild("boosterLabel") as CMlLabel).SetText(_Text);
    }
    
    main()	{
        declare Player <=> GetOwner();
    
        while(True)	{
            if(Player == Null) continue;
            declare Boolean IsFreeWheel = Player.HandicapNoGasDuration > 0 && Player.HandicapNoGasDuration < 1600;
            declare Boolean IsTurbo2 = Player.EngineTurboRatio > 1.;
            if(IsFreeWheel)
                SetBoosterLabelText("Free wheeling!");
            else if(IsTurbo2)
                SetBoosterLabelText("Turbo 200%");
            else
                SetBoosterLabelText("");
            yield;
        }	
    }
    --></script>
    </manialink>
    """;
    }




/// CHRONO UI - Time / NbRespawns, speed and dist. info 
Text DrawChronoUI(Boolean _IsPlatform)	{
    return """<manialink version="3">
    
    <label id="nbRespawnsLabel" hidden="1" halign="center" style="TextRaceChrono" textsize="10" pos="0 -78" text="???"/>
    <label id="timeLabel" hidden="1" halign="center" style="TextRaceChrono" textsize="8" pos="0 -80" text="???"/>
    
    <frame pos="158 -80" id="SpeedFrame">
    <label id="speedLabel" halign="right" style="TextRaceChrono" textsize="8" pos="0 0" text="0"/>
    
    <label id="distLabel" halign="right" style="TextRaceChrono" textsize="2" pos="-6 4" text="0"/>
    <label halign="right" textsize="1" pos="0 3" text="m"/>
    </frame>
    
    <script><!--
    
    #Include "TextLib" as TextLib
    #Include "MathLib" as MathLib
    
    CSmPlayer GetOwner() {
        wait(GUIPlayer != Null || InputPlayer != Null);
            if (GUIPlayer != Null) return GUIPlayer;
        return InputPlayer;
    }
    
    Text TimeToTextMP(Integer _Time)	{
        declare Text temp = TextLib::TimeToText(_Time, True);
        if(_Time < 0)	{
            temp = TextLib::SubString(temp, 2, 7);
            return "-" ^ temp;
        }
        if(_Time < 600000)	{
            temp = TextLib::SubString(temp, 1, 7);
            return temp;
        }
        return temp;
    }
    
    main()	{
        declare Player <=> GetOwner();
        Player.TrustClientSimu = False;
        
        if({{{_IsPlatform}}})
            (Page.GetFirstChild("nbRespawnsLabel") as CMlLabel).Show();
        else
            (Page.GetFirstChild("timeLabel") as CMlLabel).Show();
            
        while(True)	{
            (Page.GetFirstChild("speedLabel") as CMlLabel).SetText(""^MathLib::FloorInteger(Player.Speed * 36 / 10));
            (Page.GetFirstChild("distLabel") as CMlLabel).SetText(""^MathLib::FloorInteger(Player.Distance));
            if({{{_IsPlatform}}})
                (Page.GetFirstChild("nbRespawnsLabel") as CMlLabel).SetText(""^Player.Score.NbRespawnsRequested);
            else
                (Page.GetFirstChild("timeLabel") as CMlLabel).SetText(TimeToTextMP(Player.CurrentRaceTime));
            yield;
        }
    }
    
    --></script>
    </manialink>
    """;
    }





/// CHECKPOINT UI - time, difference time
Text UpdateCheckPointUI(Integer _WaypointTime, Integer _AnotherTime)	{
    return """<manialink version="3">
    <frame z-index="-10" pos="0 28">
        <label halign="center" style="TextRaceChrono" textsize="4" pos="0 6" id="cas"/>
        <label halign="center" style="TextRaceChrono" textsize="4" pos="0 0" id="cas2"/>
    </frame>
    <script><!--
    
    #Include "TextLib" as TextLib
    Text TimeToTextMP(Integer _Time)	{
        declare Text temp = TextLib::TimeToText(_Time, True);
        if(_Time < 0)	{
            temp = TextLib::SubString(temp, 2, 7);
            return "-" ^ temp;
        }
        if(_Time < 600000)	{
            temp = TextLib::SubString(temp, 1, 7);
            return temp;
        }
        return temp;
    }
    
    main()	{
        Audio.PlaySoundEvent(CAudioManager::ELibSound::Checkpoint, 0, 1.);
        
        declare Time = {{{_WaypointTime}}};
        declare Time2 = {{{_AnotherTime}}};
        
        (Page.GetFirstChild("cas") as CMlLabel).SetText(TimeToTextMP(Time));
        
        if(Time2 == -1)	
            (Page.GetFirstChild("cas2") as CMlLabel).Hide();
    
        declare diff = Time - Time2;
        declare Text style;
        if(diff < 0)
            style = "$00F";
        else
            style = "$F00+";	
        (Page.GetFirstChild("cas2") as CMlLabel).SetText("" ^ style ^ TimeToTextMP(diff));
        sleep(1500);
        (Page.GetFirstChild("cas") as CMlLabel).Hide();
        (Page.GetFirstChild("cas2") as CMlLabel).Hide();
    }
    
    
    --></script>
    </manialink>
    """;
    }