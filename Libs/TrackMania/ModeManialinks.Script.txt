declare Text FontName;

Void SetCustomFontName(Text _FontName)	{
	FontName = _FontName;
}


Text DrawOpponentScoresUI(Text _PB)	{
	return """
	<manialink version="3">
<stylesheet>
		<style class="MedalIcon" pos="0 -1" z-index="2" size="8 8" style="MedalsBig"/>
		<style class="MedalName" pos="9 -5.3" z-index="2" size="32 10" valign="center2" textfont="GameFontSemiBold" textsize="1.5"/>
		<style class="MedalBg" scale="1" size="58 6" style="UICommon128_1" substyle="BgToolTilted" modulatecolor="222" pos="-4 -2" opacity="0.7"/>
		<style id="AuthorScore GoldScore SilverScore BronzeScore UserScore" textfont="{{{FontName}}}" pos="47 -4.7" size="10 8" valign="center" textsize="2" halign="center" z-index="2" style="TextRaceChrono"/>
</stylesheet>
		
<frame id="FrameAuthor" pos="-160 82">
	<quad class="MedalIcon" substyle="MedalNadeo"/>
	<label class="MedalName" translate="1" text="Author Medal"/>
	<quad class="MedalBg" scriptevents="1"/>
	<label id="AuthorScore"/>
</frame>
<frame id="FrameGold" pos="-160 74">
	<quad class="MedalIcon"substyle="MedalGold"/>
	<label class="MedalName" translate="1" text="Gold Medal"/>
	<quad class="MedalBg" scriptevents="1"/>
	<label id="GoldScore"/>
</frame>
<frame id="FrameSilver" pos="-160 66">
	<quad class="MedalIcon" substyle="MedalSilver"/>
	<label class="MedalName" translate="1" text="Silver Medal"/>
	<quad class="MedalBg" scriptevents="1"/>
	<label id="SilverScore"/>
</frame>
<frame id="FrameBronze" pos="-160 58">
	<quad class="MedalIcon" substyle="MedalBronze"/>
	<label class="MedalName" translate="1" text="Bronze Medal"/>
	<quad class="MedalBg" scriptevents="1"/>
	<label id="BronzeScore"/>
</frame>
<frame id="FramePB" pos="-160 50">
	<quad class="MedalIcon" style="BgRaceScore2" substyle="ScoreLink"/>
	<label class="MedalName" text="{{{Users[0].Name}}}"/>
	<quad class="MedalBg" scriptevents="1"/>
	<label text="{{{_PB}}}" id="UserScore"/>
</frame>
<script><!--
main()	{
	declare metadata Integer ObjectiveAuthor for Map;
	declare metadata Integer ObjectiveGold for Map;
	declare metadata Integer ObjectiveSilver for Map;
	declare metadata Integer ObjectiveBronze for Map;

	if(UI == Null) return;

	declare netwrite Boolean Net_QuitRequested for UI;
	declare netwrite Boolean Net_RestartRequested for UI;
	Net_QuitRequested = False;
	Net_RestartRequested = False;
	
	(Page.GetFirstChild("AuthorScore") as CMlLabel).SetText(""^ObjectiveAuthor);
	(Page.GetFirstChild("GoldScore") as CMlLabel).SetText(""^ObjectiveGold);
	(Page.GetFirstChild("SilverScore") as CMlLabel).SetText(""^ObjectiveSilver);
	(Page.GetFirstChild("BronzeScore") as CMlLabel).SetText(""^ObjectiveBronze);
}
--></script>
</manialink>
	""";
}

/// PAUSE MENUS
Text PauseMenu()	{
	return """<manialink version="3">
	<stylesheet>
	<style id="buttonResume buttonExit ButtonNextMap ButtonRestartMap ButtonOpponents ButtonRankings ButtonMapInfo ButtonShowSkins QUITgame" style="CardButtonSmallXXXL" scale="1"/>
	</stylesheet>
	
<frame z-index="100">
	<quad z-index="-50" size="3200 2000" halign="center" valign="center" bgcolor="1C1C1C5C" style="Bgs1" substyle="BgGradBottom" scriptevents="1" opacity=".4"/>
	
	<frame id="LockFrame" pos="0 0" z-index="90" hidden="1">
		<quad pos="0 -1" z-index="1" size="165 30" halign="center" valign="center" id="bg00" style="Bgs1" substyle="BgDialogBlur"/>			
		<label  z-index="3" size="150 12.8" pos="-75 9.49" translate="1" autonewline="1" id="LockR" text="Locked" textsize="2.5"/>			
		<label pos="0 -10.5" z-index="2" size="50 8" text="Close" halign="center" translate="1" id="ZamocekZrus" scriptevents="1" valign="center" style="CardButtonMediumXL"/>
		<quad pos="0 0" z-index="0" size="400 200" halign="center" valign="center" scriptevents="1" style="Bgs1" substyle="BgEmpty"/>
	</frame>

	<frame id="HideOpt" z-index="20" pos="0 25" scale="1.2">
		<frame pos="0 -10" scale=".85" id="menubuttons">	
			<label pos="0 18" z-index="0" size="119 7" text="Options" style="TextTitle3" textfont="GameFontExtraBold" translate="1" halign="center" textsize="2.5" valign="center"/>
			<quad pos="0 23" z-index="-6" size="120 68" bgcolor="FFFA" style="UICommon128_1" substyle="BgDialog" halign="center"/>	
			<quad pos="0 23" z-index="-4" size="120 10" bgcolor="FFFA" style="UICommon128_1" substyle="BgDialogTitle" halign="center"/>	
				
			
			<label id="buttonResume" text="Continue" posn="-30 -38" translate="1" valign="center2" z-index="2" textsize="4" scriptevents="1" halign="center"  style="CardButtonMediumL" scale="1.1"/>	
				
			<label id="ButtonRestartMap" text="Restart" pos="0 -13" halign="center" valign="center2" textsize="4" translate="1" scriptevents="1" z-index="1"/>	
			<label id="ButtonOpponents" hidden="1" text="Select Opponents" pos="0 -6" halign="center" valign="center2" textsize="4" translate="1" scriptevents="1"/>	
				
			<label id="ButtonMapInfo" text="Information" pos="0 1" halign="center" valign="center2" textsize="4" translate="1" scriptevents="1" z-index="1"/>	
			
			<label text="Leave" textsize="4" translate="1" id="buttonExit" scriptevents="1" z-index="10" halign="center" valign="center2" focusareacolor1="DD4646CF" pos="30 -38" style="CardButtonMediumL" scale="1.1"/>
		</frame>	
	</frame>
</frame>
	<script><!--
	#Include "TextLib" as TextLib
	#Include "MathLib" as MathLib
	#Include "AnimLib" as AnimLib
	declare Integer i;
	declare Integer maxi;
	declare CMlFrame Buttons;
	declare Text[] ButtonNames;
	
	Void ResumePlay()	{
		i=0;
		CloseInGameMenu(CMlScriptIngame::EInGameMenuResult::Resume);
		Audio.PlaySoundEvent(CAudioManager::ELibSound::HideDialog, 0, 1.);
	}
	
	Void FocusButton(Integer _i)	{
		declare ButtonName = ButtonNames[_i];
		(Page.GetFirstChild(ButtonName) as CMlLabel).Focus();
		log(ButtonName);
	
	}
	
	Void MoveRight()	{
	
		if(!Page.GetFirstChild("LockFrame").Visible)	{
			if(i!=maxi)	{
				i += 1;
			}
			else
				i = 0;
		}
		FocusButton(i);
	}
	
	Void MoveLeft()	{
		
		if(!Page.GetFirstChild("LockFrame").Visible)	{
			if(i!=0)	{
				i -= 1;
			}
			else
				i = ButtonNames.count -1;
		}
		FocusButton(i);
	}
	
	Void ShowMessage(Text _Msg)	{
			log(_Msg);
	}
		
	main()	{		
		i = 0; //index
		declare TimerRequest = Now - 10000;
		declare LatestClick = "";
		ButtonNames = ["buttonResume", "buttonExit", "ButtonMapInfo", /*"ButtonOpponents",*/ "ButtonRestartMap"];
				
		maxi = ButtonNames.count - 1;
		declare netwrite Boolean Net_RestartRequested for UI;
		declare netwrite Boolean Net_ShowOpponents for UI;
		
		wait(Players.count != 0);
		declare netwrite Boolean ShowOpponents for UI;
	
		EnableMenuNavigation(True,False,Null,50);
	
		while(True) {
			if(LatestClick!="")	{
				switch(LatestClick)	{
					case "buttonResume":	{
						ResumePlay();
					}
					case "ButtonRestartMap":	{
						Net_RestartRequested = True;
						ResumePlay();
					}
					case "ButtonOpponents":	{
						ResumePlay();
						Net_ShowOpponents = True;
					}
					case "ButtonMapInfo":	{
						ShowCurChallengeCard();
						ResumePlay();
					}
					case "buttonExit":	{	
						Audio.ClearAllDelayedSoundsEvents();
						Audio.PlaySoundEvent(CAudioManager::ELibSound::HideDialog, 0, 1.);
						CloseInGameMenu(CMlScriptIngame::EInGameMenuResult::Quit);
						}
					}
					LatestClick = "";
				}
			
			
				foreach(Event,PendingEvents) {
					switch(Event.Type) {
						
						case CMlEvent::Type::MenuNavigation: {
							if(Event.MenuNavAction == CMlEvent::EMenuNavAction::Cancel) {
								ResumePlay();
							}
							if(Event.MenuNavAction == CMlEvent::EMenuNavAction::Right || Event.MenuNavAction == CMlEvent::EMenuNavAction::Down)	{
								MoveRight();	
							}
							if(Event.MenuNavAction == CMlEvent::EMenuNavAction::Left || Event.MenuNavAction == CMlEvent::EMenuNavAction::Up)	{
								MoveLeft();
							}
							if(Event.MenuNavAction == CMlEvent::EMenuNavAction::Select)	{
								LatestClick = ButtonNames[i];									
							}
						}
						case CMlEvent::Type::MouseClick: {
							if(ButtonNames.exists(Event.ControlId)) {
								LatestClick = Event.ControlId;
							}
							else	{
								if (Event.ControlId == "Right")	{
									MoveRight();
								}
								if (Event.ControlId == "Left")	{
									MoveLeft();
								}
							}
						}
					}
				}
				yield;
			}
		}
		-->
	</script>
	</manialink>""";
}





/// Boost / Freewheel / Special UI
Text DrawGameplayTextUI()	{
    return """<manialink version="3">
    <label id="boosterLabel" text="" translate="1" textemboss="1" halign="center" textfont="{{{FontName}}}" textsize="4" pos="0 60"/>
    <script><!--
    
    CSmPlayer GetOwner() {
        wait(GUIPlayer != Null || InputPlayer != Null);
        if (GUIPlayer != Null) return GUIPlayer;
        return InputPlayer;
    }
    
    Void SetBoosterLabelText(Text _Text)	{
        (Page.GetFirstChild("boosterLabel") as CMlLabel).SetText(_Text);
    }
    
    main()	{
        declare Player <=> GetOwner();
        declare DisplayedDuration = 1600;

        while(True)	{
            if(Player == Null) {
				yield;
				continue;
			}
            declare Boolean IsFreeWheel = Player.HandicapNoGasDuration > 0 && Player.HandicapNoGasDuration < DisplayedDuration;
            declare Boolean IsTurbo = Player.EngineTurboRatio > .5;
            declare Boolean IsNoGrip = Player.HandicapNoGripDuration > 0 && Player.HandicapNoGripDuration < DisplayedDuration;
            declare Boolean IsNoSteering = Player.HandicapNoSteeringDuration > 0 && Player.HandicapNoSteeringDuration < DisplayedDuration;
            declare Boolean IsNoBrakes = Player.HandicapNoBrakesDuration > 0 && Player.HandicapNoBrakesDuration < DisplayedDuration;
            declare Boolean IsForceGas = Player.HandicapForceGasDuration > 0 && Player.HandicapForceGasDuration < DisplayedDuration;
            if(IsFreeWheel)
                SetBoosterLabelText("Free wheeling!");
            else if(IsTurbo)
                SetBoosterLabelText("Turbo!");
            else if(IsNoGrip)
                SetBoosterLabelText("No grip!");
            else if(IsNoSteering)
                SetBoosterLabelText("No steering!");
            else if(IsNoBrakes)
                SetBoosterLabelText("No brakes!");
            else if(IsForceGas)
                SetBoosterLabelText("Forced gas!");
            else
                SetBoosterLabelText("");
            yield;
        }	
    }
    --></script>
    </manialink>
    """;
}




/// CHRONO UI - Time / NbRespawns, speed and dist. info 
Text DrawChronoUI(Boolean _IsPlatform, Boolean _ShowSpeed)	{
    return """<manialink version="3">

    <label id="nbRespawnsLabel" hidden="1" halign="center" style="TextRaceChrono" textfont="{{{FontName}}}" textsize="10" pos="0 -78" text="???"/>
    <label id="timeLabel" hidden="1" halign="center" style="TextRaceChrono" textfont="{{{FontName}}}" textsize="8" pos="0 -80" text="???"/>
    
    <frame pos="158 -80" id="SpeedFrame" hidden="1">
		<label id="speedLabel" halign="right" style="TextRaceChrono" textfont="{{{FontName}}}" textsize="8" pos="0 0" text="0"/>  
		<label id="distLabel" halign="right" style="TextRaceChrono" textfont="{{{FontName}}}" textsize="2" pos="-6 4" text="0"/>
		<label halign="right" textsize="1" pos="0 3" text="m"/>
    </frame>
    
    <script><!--
    
    #Include "TextLib" as TextLib
    #Include "MathLib" as MathLib
    
    CSmPlayer GetOwner() {
        wait(GUIPlayer != Null || InputPlayer != Null);
            if (GUIPlayer != Null) return GUIPlayer;
        return InputPlayer;
    }
    
    Text TimeToTextMP(Integer _Time)	{
        declare Text temp = TextLib::TimeToText(_Time, True);
        if(_Time < 0)	{
            temp = TextLib::SubString(temp, 2, 7);
            return "-" ^ temp;
        }
        if(_Time < 600000)	{
            temp = TextLib::SubString(temp, 1, 7);
            return temp;
        }
        return temp;
    }
    
    main()	{
        declare Player <=> GetOwner();
		declare NbRespawnsLabel <=> (Page.GetFirstChild("nbRespawnsLabel") as CMlLabel);
		declare TimeLabel <=> (Page.GetFirstChild("timeLabel") as CMlLabel);
		declare SpeedLabel <=> (Page.GetFirstChild("speedLabel") as CMlLabel);
		declare DistLabel <=> (Page.GetFirstChild("distLabel") as CMlLabel);
        Player.TrustClientSimu = False;

		if({{{_ShowSpeed}}})
				Page.GetFirstChild("SpeedFrame").Show();

        if({{{_IsPlatform}}})
            NbRespawnsLabel.Show();
        else
            TimeLabel.Show();

        while(True)	{
			if(Player == Null) {
				yield;
				continue;
			}
			SpeedLabel.SetText(""^MathLib::FloorInteger(Player.Speed * 36 / 10));
			DistLabel.SetText(""^MathLib::FloorInteger(Player.Distance));
					
			NbRespawnsLabel.SetText(""^Player.Score.NbRespawnsRequested);
			TimeLabel.SetText(TimeToTextMP(Player.CurrentRaceTime));
            yield;
        }
    }
    
    --></script>
    </manialink>
    """;
    }





/// CHECKPOINT UI - time, difference time
Text UpdateCheckPointUI(Integer _WaypointTime, Integer _AnotherTime)	{
    return """<manialink version="3">
    <frame z-index="-10" pos="0 28">
        <label halign="center" style="TextRaceChrono" textfont="{{{FontName}}}" textsize="4" pos="0 6" id="cas"/>
        <label halign="center" style="TextRaceChrono" textfont="{{{FontName}}}" textsize="4" pos="0 0" id="cas2"/>
    </frame>
    <script><!--
    
    #Include "TextLib" as TextLib
    Text TimeToTextMP(Integer _Time)	{
        declare Text temp = TextLib::TimeToText(_Time, True);
        if(_Time < 0)	{
            temp = TextLib::SubString(temp, 2, 7);
            return "-" ^ temp;
        }
        if(_Time < 600000)	{
            temp = TextLib::SubString(temp, 1, 7);
            return temp;
        }
        return temp;
    }
    
    main()	{
        Audio.PlaySoundEvent(CAudioManager::ELibSound::Checkpoint, 0, 1.);
        
        declare Time = {{{_WaypointTime}}};
        declare Time2 = {{{_AnotherTime}}};
        
        (Page.GetFirstChild("cas") as CMlLabel).SetText(TimeToTextMP(Time));
        
        if(Time2 == -1)	
            (Page.GetFirstChild("cas2") as CMlLabel).Hide();
    
        declare diff = Time - Time2;
        declare Text style;
        if(diff < 0)
            style = "$00F";
        else
            style = "$F00+";	
        (Page.GetFirstChild("cas2") as CMlLabel).SetText("" ^ style ^ TimeToTextMP(diff));
        sleep(1500);
        (Page.GetFirstChild("cas") as CMlLabel).Hide();
        (Page.GetFirstChild("cas2") as CMlLabel).Hide();
    }
    
    
    --></script>
    </manialink>
    """;
    }


Text DrawAfterRaceUI(Boolean _IsPlatform, Integer _CurScore, Integer _BestScore, Boolean _IsBetter)	{
	return """
<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<manialink version="3">
<stylesheet>
	<style class="med" pos="-156 76.5" z-index="1" size="11 11"/>
	<style id="ButtonImprove ButtonQuit ButtonSaveReplay ButtonOpponents ButtonPausePlay ButtonRefresh" style="CardButtonMediumL" sizen="40 12" halign="center" valign="center"/>
	<style class="AfterRaceButtonText" textcolor="FFFFFFE7" sizen="60 12" halign="center" valign="center2" textsize="4"/>
</stylesheet>	

<frame id="SaveReplayFrame" z-index="20" scale="1.2" pos="0 0" hidden="1">
	<label pos="0 18.1" z-index="0" size="119 7" text="Save replay" style="TextTitle3" textfont="GameFontExtraBold" translate="1" halign="center" textsize="2.5" valign="center"/>
	<quad pos="0 -23" z-index="-9" size="120 46" style="UICommon128_1" substyle="BgDialog" halign="center" valign="bottom"/>	
	<quad pos="0 23" z-index="-4" size="120 10" style="UICommon128_1" substyle="BgDialogTitle" halign="center"/>	
	<entry pos="-55" z-index="10" size="110 7" default="MapAuthor(Time).Replay.Gbx" halign="left" scriptevents="1" textfont="GameFontRegular" textsize="3" valign="center2" id="ReplayUrl"/>
	<quad z-index="2" size="110 7" halign="center" scriptevents="1" valign="center2" bgcolor="A9A9A9FF" opacity="0.5"/>
	<label pos="-55 4" z-index="1" size="110 5" text="File" id="SaveReplayText" translate="1" halign="left" textfont="BiryaniDemiBold" textsize="2" valign="bottom"/>
	<label id="SaveReplaySave" text="Save" posn="-30 -14" translate="1" valign="center2" z-index="2" textsize="4" scriptevents="1" halign="center"  style="CardButtonMediumL" scale="1.1"/>		
	<label text="Close" textsize="4" translate="1" id="SaveReplayClose" scriptevents="1" z-index="10" halign="center" valign="center2" focusareacolor1="DD4646CF" pos="30 -14" style="CardButtonMediumL" scale="1.1"/>
</frame>

<frame id="NewRecordFrame" z-index="20" hidden="1" pos="0 160">
	<quad bluramount="0.9" pos="0 -5" z-index="-5" id="MessageBg" size="80 80" style="UICommon128_1" substyle="BgDialog" halign="center" valign="center"/>
	<quad z-index="5" size="30 30" halign="center" valign="center" pos="0 9" id="Medal2" style="MedalsBig" substyle="MedalSlot"/>
	<quad z-index="-4" size="60 42.5" halign="center" pos="0 25" style="Bgs1" substyle="BgDialogBlur"/>
	<label pos="0 30.5" style="TextTitle3" textfont="GameFontExtraBold" z-index="1" size="100 5" id="MessageTitle" translate="1" halign="center" valign="center" textsize="3" text="Awesome!!!"/>	
	<frame id="SPIfo" hidden="1">
		<quad z-index="-4" size="60 6" halign="center" pos="0 -26" style="Bgs1" substyle="BgDialogBlur"/>	
		<quad pos="24 -26" z-index="1" size="6 6" style="BgRaceScore2" substyle="Podium"/>
		<label pos="23 -29" z-index="1" size="16 6" text="???" id="PositionLabel" translate="1" halign="right" valign="center2" textsize="3" opacity=".8" focusareacolor2="2E2E2ECB"/>
		<label pos="-28 -29" z-index="1" size="16 6" text="0 SP" id="SPLabel" translate="1" halign="left" valign="center2" textsize="2" opacity=".8" focusareacolor2="2E2E2ECB" textcolor="6CFF00FF"/>
	</frame>
	<label pos="0 -38" z-index="1" size="35 7" text="OK" id="MessageClose" translate="1" halign="center" valign="center" scriptevents="1"  textsize="3" opacity=".8" style="CardButtonMediumS"/>
	<label pos="0 -8" z-index="1" size="58 9" style="TextTitle2" textfont="GameFontRegular" text="You set a new personal record!" id="MessageText" translate="1" halign="center"  textsize="2.5" autonewline="1"/>
	<label pos="-29 -24" z-index="1" size="30 5" textfont="GameFontRegular" text="Best time :" id="MessageTimeText" translate="1" textsize="2" valign="bottom"/>
	<label pos="29 -24" z-index="1" size="25 5" textfont="GameFontRegular"text="{{{_CurScore}}}" id="AfterRaceRecordLabel2" translate="1" textemboss="1" halign="right" textsize="2" valign="bottom"/>
</frame>

<frame id="MedalInfo" pos="0 80" z-index="80">
	<quad size="320 18" bgcolor="000000FF" halign="center" valign="center" z-index="-1" id="medalsbg" pos="0 2" scriptevents="1"/>
	<label size="50 8" text="_map name" halign="right" valign="center2" textsize="4" pos="150 -2.5" id="MapNameAfterRace"/>
	<label size="80 8" text="_author" halign="right" valign="center2" textsize="3" pos="150 4" id="MapAuthorAfterRace" translate="1"/>
	<quad  size="25 25" halign="center" valign="center" pos="0 -3" id="MedalImg" style="MedalsBig" substyle="MedalSlot"/>
</frame>	


<frame id="ControlButtons" pos="0 -80" z-index="80">
	<quad size="320 18" bgcolor="000000FF" halign="center" valign="center" z-index="-1" id="buttonsbg" scriptevents="1" pos="0 -2"/>
	<label text="Improve" translate="1" id="ButtonImprove" style="CardButtonMediumL" scriptevents="1"/>
	<label text="Save replay" translate="1" halign="center" substyle="Replay" pos="112 0" textsize="4" valign="center" id="ButtonSaveReplay" style="CardButtonSmallXXL" scriptevents="1"/>
	<label text="Quit" translate="1" pos="-120 0" id="ButtonQuit" scriptevents="1"/>
	<quad hidden="1" pos="-60 0" id="ButtonRefresh" size="12 12" scriptevents="1" style="Icons64x64_1" substyle="ClipRewind"/>
	<quad hidden="1" pos="-42 0" id="ButtonPausePlay" size="12 12" scriptevents="1" style="Icons64x64_1" substyle="ClipPause"/>
</frame>
<script><!--

#Include "TextLib" as TextLib
#Include "ColorLib" as ColorLib
#Include "MathLib" as MathLib


declare Integer i;
declare CMlFrame NewRecordDialog;
declare CMlFrame SaveReplayDialog;
declare CMlFrame ControlButtons;


declare Integer Map_ObjectiveAuthor;
declare Integer Map_ObjectiveGold;
declare Integer Map_ObjectiveSilver;
declare Integer Map_ObjectiveBronze;


Text TimeToTextWithMilli(Integer _Time) {
    return TextLib::TimeToText(_Time, True)^TextLib::SubText(""^_Time, TextLib::Length(""^_Time)-1, 1);
}

Text GetRecordTypeText(Integer _Record)	{
	declare recordtext = "???";
	declare metadata Text GameMode for Map;
	if({{{_IsPlatform}}})	
		recordtext = ""^_Record;
	else
		recordtext = TimeToTextWithMilli(_Record);
	return recordtext;
}

Text GetPositionText(Integer _PositionInteger)	{
	declare posi = _PositionInteger;
	declare PositionExtraTexts = [".", "st", "nd", "rd"];
	if (posi < 1) return "???";
	
	if(posi>3)
		return TextLib::Compose("%1th", ""^_PositionInteger);
	else
		return posi^PositionExtraTexts[posi];
	return "";
}

Void SetMapMedals(Integer _count)	{
	declare MedalQuad = (Page.GetFirstChild("MedalImg") as CMlQuad);
	declare Medal2Quad = (Page.GetFirstChild("Medal2") as CMlQuad);
	switch( _count)	{
		case 1:
			MedalQuad.Substyle = "MedalBronze";
		case 2:
			MedalQuad.Substyle = "MedalSilver";
		case 3:
			MedalQuad.Substyle = "MedalGold";
		case 4:
			MedalQuad.Substyle = "MedalNadeo";
		default:
			MedalQuad.Substyle = "MedalSlot";
	}
	Medal2Quad.Substyle = MedalQuad.Substyle;
}

Void HoverAfterRaceButton(Integer _i)	{
	declare Buttons = ["ButtonImprove", "ButtonSaveReplay", "ButtonQuit"/*, "ButtonOpponents", "ButtonRefresh", "ButtonPausePlay"*/];
	declare Text color;
	
	if(_i!=-1)	{
		//select the item
		declare SelectedId = Buttons[_i];
		declare SelItem = (Page.GetFirstChild(SelectedId) as CMlLabel); //oznaci vybrane
		SelItem.Focus();
	}
}

Void Right()	{
	if(!NewRecordDialog.Visible && !SaveReplayDialog.Visible)	{
		if(i<2)
			i += 1;
		else
			i=0;
		HoverAfterRaceButton(i);
	}
	else
		HoverAfterRaceButton(-1);
}

Void Left()	{
	if(!NewRecordDialog.Visible && !SaveReplayDialog.Visible)	{
		if(i>0)
			i -= 1;
		else
			i=2;
		HoverAfterRaceButton(i);
	}
	else
		HoverAfterRaceButton(-1);
}

***OnKeyNav***
***
	if (!NewRecordDialog.Visible && !SaveReplayDialog.Visible)	{
		if(Event.MenuNavAction == CMlScriptEvent::EMenuNavAction::Left)
			Left();
		if(Event.MenuNavAction == CMlScriptEvent::EMenuNavAction::Right)
			Right();
		if(Event.MenuNavAction == CMlScriptEvent::EMenuNavAction::Select)
			SelectAfterRaceButton(i);
	}
	if (NewRecordDialog.Visible){
		if(Event.MenuNavAction == CMlScriptEvent::EMenuNavAction::Select || Event.MenuNavAction == CMlScriptEvent::EMenuNavAction::Cancel)	{
			HideNewRecordDialog();
		}
	}
	if (SaveReplayDialog.Visible)	{
	declare SaveButton = (Page.GetFirstChild("SaveReplaySave") as CMlLabel);
	declare ReplayUrlEntry = (Page.GetFirstChild("ReplayUrl") as CMlEntry);

		if(Event.MenuNavAction == CMlScriptEvent::EMenuNavAction::Up || Event.MenuNavAction == CMlScriptEvent::EMenuNavAction::Down)	{
			if(!SaveButton.IsFocused)
				SaveButton.Focus();
			else
				ReplayUrlEntry.Focus();
		}
		if(Event.MenuNavAction == CMlScriptEvent::EMenuNavAction::Select)	{
			
			if(!SaveButton.IsFocused)
				SaveButton.Focus();
			else	{
				SaveReplay();
			}
		}
		if(Event.MenuNavAction == CMlScriptEvent::EMenuNavAction::Cancel)	
			HideSaveReplayDialog();
	}

***
Boolean IsBetter(Integer _UserRecord, Integer _OldRecord)	{
	if(_OldRecord == -1)
		return True;

	if({{{_IsPlatform}}})	{
		if(_UserRecord <= _OldRecord)
			return True;
	}
	else
		if(_UserRecord < _OldRecord)
			return True;

	return False;
}


Integer GetMapMedals(Integer _RecordTime)	{
	if(Map_ObjectiveAuthor <= 0 && Map_ObjectiveGold <= 0) {
		Map_ObjectiveAuthor = 0;
		Map_ObjectiveGold = 0;
		Map_ObjectiveSilver = 3;
		Map_ObjectiveBronze = 10;
	}

	declare UserRecord = _RecordTime;	
	 
	declare Integer NbMedals;
	if(IsBetter(UserRecord, Map_ObjectiveBronze))	{
		NbMedals = 1;
		if(IsBetter(UserRecord, Map_ObjectiveSilver))	{
			NbMedals = 2;
			if(IsBetter(UserRecord, Map_ObjectiveGold))	{
				NbMedals = 3;
				if(IsBetter(UserRecord, Map_ObjectiveAuthor) && Map_ObjectiveAuthor != Map_ObjectiveGold)	{
					NbMedals = 4;
				}
			}
		}
	}
	if(UserRecord==-1)
		NbMedals = 0;
	
	return NbMedals;
}

Void ShowSaveReplayDialog(Text _MapName)	{
	Audio.PlaySoundEvent(CAudioManager::ELibSound::ShowDialog, 0, 1.);
	SaveReplayDialog.Show();
	declare ReplayUrlEntry = (Page.GetFirstChild("ReplayUrl") as CMlEntry); 
	ReplayUrlEntry.Value = _MapName^"_"^LocalUser.Name^"("^GetRecordTypeText({{{_CurScore}}})^")";
	ReplayUrlEntry.Focus();
}

Void NewRecordDialog(Integer _MedalCount, Integer _PrevMedalCount, Integer _UserRecord)	{
	ControlButtons.Hide();

	declare netread Integer Net_PositionInteger for UI;
	declare PositionText =  GetPositionText(Net_PositionInteger);
	declare netread Integer Net_SPInteger for UI;
	
	(Page.GetFirstChild("PositionLabel") as CMlLabel).SetText(PositionText);
	(Page.GetFirstChild("SPLabel") as CMlLabel).SetText(Net_SPInteger^" SP");
	NewRecordDialog.Show();
	Audio.PlaySoundEvent(CAudioManager::ELibSound::ShowDialog, 0, 1.);
	
	declare WonMedalCount = _MedalCount - _PrevMedalCount;
	
	declare Text MessageTitle;
	switch ( _MedalCount)	{
		case 1: MessageTitle = "Finished";
		case 2: MessageTitle = "Well done!";
		case 3: MessageTitle = "Impressive!!";
		case 4: MessageTitle = "Awesome!!!";	
	}
	(Page.GetFirstChild("MessageTitle") as CMlLabel).SetText(MessageTitle);
	if(WonMedalCount>1)
		(Page.GetFirstChild("MessageText") as CMlLabel).SetText(TextLib::Compose("You won %1 medals!", ""^WonMedalCount));
	else	{
		if(WonMedalCount==1)
		(Page.GetFirstChild("MessageText") as CMlLabel).SetText("You won 1 medal!");
		else
		(Page.GetFirstChild("MessageText") as CMlLabel).SetText("You set a new personal record!");
	}
	(Page.GetFirstChild("MessageClose") as CMlLabel).Focus();
	AnimMgr.Add(NewRecordDialog, "<frame pos='0 10'/>", 350, CAnimManager::EAnimManagerEasing::SineIn);
}

Void HideSaveReplayDialog()	{
	SaveReplayDialog.Hide();
	declare netwrite Text Net_SaveReplayUrl for UI;
	Net_SaveReplayUrl = "";
	Audio.PlaySoundEvent(CAudioManager::ELibSound::HideDialog, 0, 1.);
}

Void SelectAfterRaceButton(Integer _i)	{
	declare netwrite Boolean Net_RestartRequested for UI;
	declare netwrite Boolean Net_QuitRequested for UI;
	declare netwrite Boolean Net_ShowOpponents for UI;
	switch (_i) {
		case 0: {
			Net_RestartRequested = True;
			EnableMenuNavigationInputs = False;
			Audio.PlaySoundEvent(CAudioManager::ELibSound::HideDialog, 0, 1.);
		}
		case 1: {
			ShowSaveReplayDialog(Map.MapInfo.Name);
		}
		case 2: {
			Audio.PlaySoundEvent(CAudioManager::ELibSound::HideDialog, 0, 1.);
			EnableMenuNavigationInputs = False;
			Net_QuitRequested = True;
		}
		/*case 3:{
			EnableMenuNavigationInputs = False;
			Net_ShowOpponents = True;
		}
		case 4:{
			RestartMap0 = True;
		}*/
	}	

}

Void HideNewRecordDialog()	{
	AnimMgr.Add(NewRecordDialog, "<frame pos='0 180'/>", 250, CAnimManager::EAnimManagerEasing::SineIn);	
	AnimMgr.Add(NewRecordDialog, "<frame hidden='1'/>", 350, CAnimManager::EAnimManagerEasing::SineIn);	
	Audio.PlaySoundEvent(CAudioManager::ELibSound::HideDialog, 0, 1.);
	HoverAfterRaceButton(0);
	ControlButtons.Show();
}

Void SaveReplay()	{
	HoverAfterRaceButton(-1);
	declare netwrite Text Net_SaveReplayUrl for UI;
	Net_SaveReplayUrl = (Page.GetFirstChild("ReplayUrl") as CMlEntry).Value;
	Audio.PlaySoundEvent(CAudioManager::ELibSound::HideDialog, 0, 1.);
}

Void PreLoad()	{
	declare netwrite Text Net_SaveReplayUrl for UI; 
	Net_SaveReplayUrl = "";
	EnableMenuNavigationInputs = False;

	SaveReplayDialog = (Page.GetFirstChild("SaveReplayFrame") as CMlFrame);
	NewRecordDialog = (Page.GetFirstChild("NewRecordFrame") as CMlFrame);
	ControlButtons = (Page.GetFirstChild("ControlButtons") as CMlFrame);

}

main()	{	
	PreLoad();
	declare AfterRaceButtons = ["ButtonImprove", "ButtonSaveReplay", "ButtonQuit"/*, "ButtonOpponents", "ButtonRefresh", "ButtonPausePlay"*/];

	//declare Map_ <=> Map.MapInfo;
	
	declare metadata Integer ObjectiveAuthor for Map;
	declare metadata Integer ObjectiveGold for Map;
	declare metadata Integer ObjectiveSilver for Map;
	declare metadata Integer ObjectiveBronze for Map;
	
	(Page.GetFirstChild("MapNameAfterRace") as CMlLabel).SetText(""^Map.MapInfo.Name);
	(Page.GetFirstChild("MapAuthorAfterRace") as CMlLabel).SetText(""^Map.MapInfo.AuthorNickName);
	
	if ({{{_IsPlatform}}}) {
		Map_ObjectiveAuthor = ObjectiveAuthor;
		Map_ObjectiveGold = ObjectiveGold;
		Map_ObjectiveSilver = ObjectiveSilver;		
		Map_ObjectiveBronze = ObjectiveBronze;
	}
	
	declare Integer UserRecordTemp;
	UserRecordTemp = {{{_CurScore}}};
	declare Integer BestScore = {{{_BestScore}}};

	sleep(10);
	declare MedalCount = GetMapMedals(UserRecordTemp);
	if({{{_IsBetter}}})	{
		log("BestScore: "^BestScore ^ "UserRecordTemp" ^ UserRecordTemp);
		declare OldMedalCount = GetMapMedals(BestScore);
		NewRecordDialog(MedalCount, OldMedalCount, UserRecordTemp);
	}
	else
		HoverAfterRaceButton(i);
	SetMapMedals(MedalCount);
	//(Page.GetFirstChild("AfterRaceCurLabel") as CMlLabel).SetText(GetRecordTypeText(UserRecordTemp));

	sleep(200);
	EnableMenuNavigationInputs = True;

	while(True)	{	
		foreach (Event in PendingEvents) {

			if (Event.Type == CMlScriptEvent::Type::MenuNavigation) {
				+++OnKeyNav+++
			}
			if (Event.Type == CMlScriptEvent::Type::KeyPress) {
				if(Event.KeyName=="NumpadMultiply")
					log("dont hide ui unless you want to experience some nasty bugs. thanks");
			}
			if (Event.Type ==  CMlScriptEvent::Type::MouseOver) {
				if(!SaveReplayDialog.Visible && !NewRecordDialog.Visible)	{
					if(AfterRaceButtons.exists(Event.ControlId) )	{
						i = AfterRaceButtons.keyof(Event.ControlId);
						HoverAfterRaceButton(i)	;
					}
				}
				else	
					HoverAfterRaceButton(-1);
			}

			if (Event.Type ==  CMlScriptEvent::Type::MouseClick) {
				if(Event.ControlId == "MessageClose" || Event.ControlId == "SaveReplayClose")	{
					HideNewRecordDialog();
					HideSaveReplayDialog();
				}
				if(Event.ControlId == "SaveReplaySave")	{
					SaveReplay();
				}
				if(AfterRaceButtons.exists(Event.ControlId))	{
					SelectAfterRaceButton(i);
				}
			}
		}
		yield;
	}	
}
--></script>

</manialink>
	
	""";
}

Text DrawEmptyMusicPlayerLayer() {
	return """
<script><!--
main()	{
	Audio.ClearAllDelayedSoundsEvents();
	declare EmptyPath = "file://Media/Sounds/TMNextPlatform/empty.wav";
	declare Music = Audio.CreateSound(EmptyPath, 1., True, True, False);
	while(True)
	{
		if(Music != Null && Music.DownloadInProgress == False)
			Music.Play();
		yield;
	}
	
}
--></script>
	""";
}

Text DrawMusicPlayerLayer() {
	return """
<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<manialink version="3">
	<frame id="MusicInfoFrame" pos="110 140" z-index="50" >
		<quad bluramount="0.6" pos="-160 -60.5" z-index="-1" size="100 22" style="Bgs1" substyle="BgHealthBar" valign="center"/>
		<label pos="-154 -54" z-index="0" size="85 5" text="Author" halign="left" valign="center" textsize="3" textfont="GameFontRegular" id="MusicAuthor" class="musicinfo"/>
		<label pos="-154.5 -60" z-index="0" size="85 5" text="Name" halign="left" valign="center" textsize="4" textfont="GameFontSemiBold" id="MusicName" class="musicinfo"/>
		<label pos="-154 -66" z-index="0" size="85 5" text="Album" halign="left" valign="center" textsize="2" textfont="GameFontRegular" id="MusicAlbum" class="musicinfo"/>
		<label size="14 14" text="♫" halign="center" valign="center" textcolor="FFFFFFEC" textsize="9" z-index="-9" hidden="" id="ButtonMusicText" pos="-69 -60"/>
	</frame>
	
	<frame pos="-156 -86" z-index="90">
	<label size="8 8" text="♫" halign="center" valign="center" textcolor="FFFFFFEC" textsize="4" z-index="-9" hidden="" id="ButtonMusicText"/>
	<quad z-index="-10" size="8 8" halign="center" valign="center" opacity=".65" id="ButtonMusic" bgcolor="2E2E2ECB" scriptevents="1"/>
	</frame>
	
	<script><!--
#Include "TextLib" as TextLib
#Include "MathLib" as MathLib
#Include "ColorLib" as ColorLib

#Struct Track {	
	Text Title;
	Text Artist;
	Text Album;
	Text Image;
	Text Filename;	   
}

#Struct MusicStatus {
	Track CurrentTrack;
	Boolean IsReady;
}

declare CAudioSource Music;
declare Track[] Tracks;
declare Text[] enabledTracks;
declare MusicStatus Status;
declare Integer MusicInfoHideTime;
Track FindTrack(Text _Filename) {
	foreach (track in Tracks) {
		if (track.Filename == _Filename) {
			return track;
		}		
	}
	return Track{};		
}

Void UpdateMusicInfo()	{
	(Page.GetFirstChild("MusicName") as CMlLabel).SetText(Status.CurrentTrack.Title);
	(Page.GetFirstChild("MusicAlbum") as CMlLabel).SetText(Status.CurrentTrack.Album);
	(Page.GetFirstChild("MusicAuthor") as CMlLabel).SetText(Status.CurrentTrack.Artist);
	AnimMgr.Add(Page.GetFirstChild("MusicInfoFrame"), "<frame pos='110 140' />", 600, CAnimManager::EAnimManagerEasing::SineOut);
	MusicInfoHideTime = Now + 3000;
}

Void PlayRandomSong() {

		declare Integer idx = 0;
		declare Boolean cont = True;
		if (enabledTracks.count > 0) {
			while(cont) {
					idx = MathLib::Rand(0, enabledTracks.count-1);
					if (enabledTracks[idx] != Status.CurrentTrack.Filename) {
					cont = False;
					}
					yield;
			}
		}
		
		Status.IsReady = False;		
		if (Music != Null) {
			Audio.DestroySound(Music);
		}
		Audio.ClearAllDelayedSoundsEvents();
		Music = Audio.CreateSound(enabledTracks[idx], 1.0, True, False, False);		
		Status.CurrentTrack = FindTrack(enabledTracks[idx]);
		Music.Play();
		UpdateMusicInfo();
}

***OnInit***
***

declare persistent Real UICol for LocalUser;
declare ConCol = UICol - .5;
declare persistent Text[] TM2I_DisabledTracks for LocalUser;
Status.IsReady = False;

declare Text data;
declare CHttpRequest Request = Http.CreateGet("https://raw.githubusercontent.com/ArkadySK/TMNextPlatform/main/Audio/Music/tracklist.json", False);
wait(Request.IsCompleted);
data = Request.Result;
Http.Destroy(Request);

if (Tracks.fromjson(data)) {
	foreach (track in Tracks) {
		if (!TM2I_DisabledTracks.exists(track.Filename)) {
			enabledTracks.add(track.Filename);
		}
	}
	PlayRandomSong();
}
***

***Loop***
***

if(MusicInfoHideTime < Now && MusicInfoHideTime!=0 && Page.GetFirstChild("MusicInfoFrame").RelativePosition.Y == 140.)	{
	AnimMgr.Add(Page.GetFirstChild("MusicInfoFrame"), "<frame pos='110 170' />", 600, CAnimManager::EAnimManagerEasing::SineOut);
	MusicInfoHideTime = 0;
	}
	
if (Music != Null && Music.DownloadInProgress == False) {
	if (Status.IsReady == False) {
		Status.IsReady = True;			
		Music.Play();
	}
}

***

***OnKeyPress***
***

if (Event.KeyName=="N") {	
	PlayRandomSong();
}

***

***OnMouseClick***
***

if (Event.ControlId == "ButtonMusic") {	
	PlayRandomSong();
}

***
***OnMouseOver***
***
if (Event.ControlId == "ButtonMusic") {	
declare UICol_ = UICol - .7;
	(Page.GetFirstChild("ButtonMusic") as CMlQuad).BgColor = <UICol_, UICol_, UICol_>;
}
***

***OnMouseOut***
***
if (Event.ControlId == "ButtonMusic") {	
	(Page.GetFirstChild("ButtonMusic") as CMlQuad).BgColor = <UICol, UICol, UICol>;
}
***


Void _nothing() { }

/*  Main Script  */
main() {

  +++OnInit+++

	while(True) {
	if(Music.PlayLength - .2 <= Music.PlayCursor)	{
		PlayRandomSong();
	}
    yield;
    if (!PageIsVisible) {
  			continue;
  	}

    foreach (Event in PendingEvents) {
			switch (Event.Type) {
				case CMlScriptEvent::Type::EntrySubmit: {
					+++EntrySubmit+++
				}
				case CMlScriptEvent::Type::KeyPress: {
					+++OnKeyPress+++
				}
				case CMlScriptEvent::Type::MouseClick: {
					+++OnMouseClick+++
				}
				case CMlScriptEvent::Type::MouseOut: {
					+++OnMouseOut+++
				}
				case CMlScriptEvent::Type::MouseOver: {
					+++OnMouseOver+++
				}
			}
		}

		+++Loop+++
  }

}
--></script>

</manialink>
""";
}