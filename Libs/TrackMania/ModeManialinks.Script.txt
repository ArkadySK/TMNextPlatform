Text DrawOpponentScoresUI(Text _PB)	{
	return """
<manialink version="3">
<frame id="FramePB" pos="-160 82">
	<quad pos="0 -1" z-index="2" size="8 8" style="BgRaceScore2" substyle="ScoreLink"/>
	<label pos="9 -5" z-index="2" size="32 10" text="{{{Users[0].Name}}}" valign="center2" textsize="1.5" translate="1"/>
	<quad size="54 6" style="Bgs1" substyle="NavButton" pos="0 -2" scriptevents="1" opacity=".8"/>
	<label text="{{{_PB}}}" pos="47 -5" size="10 8" valign="center" textsize="2" halign="center" z-index="2" style="TextRaceChrono"/>
</frame>
</manialink>
	""";
}

/// PAUSE MENUS
Text PauseMenu()	{
	return """<manialink version="3">
	<stylesheet>
		<style id="buttonResume buttonExit ButtonNextMap ButtonRestartMap ButtonOpponents ButtonRankings ButtonMapInfo ButtonShowSkins QUITgame" textcolor="FFFFFFE7" focusareacolor2="2E2E2ECB" focusareacolor1="2E2E2ECB" sizen="55 17" style="CardButtonSmallXXXL" scale="1"/>
		</stylesheet>
	<frame z-index="100">
	
		<quad pos="0 -96" z-index="-50" size="320 200" halign="center" valign="bottom" bgcolor="1C1C1C5C" style="Bgs1" substyle="BgGradBottom" scriptevents="1" opacity=".4"/>
		
		<frame id="LockFrame" pos="0 0" z-index="90" hidden="1">
			<quad pos="0 -1" z-index="1" size="165 30" halign="center" valign="center" id="bg00" style="Bgs1" substyle="BgDialogBlur"/>			
			<label  z-index="3" size="150 12.8" pos="-75 9.49" translate="1" autonewline="1" id="LockR" text="Locked" textsize="2.5"/>			
			<label pos="0 -10.5" z-index="2" size="50 8" text="Close" halign="center" translate="1" id="ZamocekZrus" scriptevents="1" valign="center" style="CardButtonMediumXL"/>
			<quad pos="0 0" z-index="0" size="400 200" halign="center" valign="center" scriptevents="1" style="Bgs1" substyle="BgEmpty"/>
		</frame>
	
		<frame id="HideOpt" z-index="20" pos="0 25" scale="1.2">
			<frame pos="0 -10" scale=".85" id="menubuttons">	
				<label pos="0 18" z-index="0" size="119 7" text="Race menu" style="TextButtonNav" translate="1" halign="center" textsize="2.5" valign="center"/>
				<quad pos="0 -46" z-index="-5" size="120 59" bgcolor="FFFA" style="Bgs1InRace" substyle="BgCardProperty" halign="center" valign="bottom"/>	
				<quad pos="0 22.5" z-index="-4" size="120 10" bgcolor="FFFA" style="Bgs1InRace" substyle="BgTitle" halign="center"/>	
				<quad pos="0 27" z-index="-3" size="126.4 8" bgcolor="FFFA" halign="center" style="Bgs1" substyle="BgGlow2"/>	
				
				<label id="buttonResume" text="Continue" posn="-30 -38" translate="1" valign="center2" z-index="2" textsize="4" scriptevents="1" halign="center"  style="CardButtonMediumL" scale="1.1"/>	
					
				<label id="ButtonRestartMap" text="Restart" pos="0 -13" halign="center" valign="center2" textsize="4" translate="1" scriptevents="1"/>	
				<label id="ButtonOpponents" hidden="1" text="Select Opponents" pos="0 -6" halign="center" valign="center2" textsize="4" translate="1" scriptevents="1"/>	
					
				<label id="ButtonMapInfo" text="Information" pos="0 1" halign="center" valign="center2" textsize="4" translate="1" scriptevents="1"/>	
				
				<label text="Leave" textsize="4" translate="1" id="buttonExit" scriptevents="1" z-index="10" halign="center" valign="center2" focusareacolor1="DD4646CF" pos="30 -38" style="CardButtonMediumL" scale="1.1"/>
			</frame>	
		</frame>
	</frame>
	<script><!--
	#Include "TextLib" as TextLib
	#Include "MathLib" as MathLib
	#Include "AnimLib" as AnimLib
	declare Integer i;
	declare Integer maxi;
	declare CMlFrame Buttons;
	declare Text[] ButtonNames;
	
	Void ResumePlay()	{
		i=0;
		CloseInGameMenu(CMlScriptIngame::EInGameMenuResult::Resume);
		Audio.PlaySoundEvent(CAudioManager::ELibSound::HideDialog, 0, 1.);
	}
	
	Void FocusButton(Integer _i)	{
		declare ButtonName = ButtonNames[_i];
		(Page.GetFirstChild(ButtonName) as CMlLabel).Focus();
		log(ButtonName);
	
	}
	
	Void MoveRight()	{
	
		if(!Page.GetFirstChild("LockFrame").Visible)	{
			if(i!=maxi)	{
				i += 1;
			}
			else
				i = 0;
		}
		FocusButton(i);
	}
	
	Void MoveLeft()	{
		
		if(!Page.GetFirstChild("LockFrame").Visible)	{
			if(i!=0)	{
				i -= 1;
			}
			else
				i = ButtonNames.count -1;
		}
		FocusButton(i);
	}
	
	Void ShowMessage(Text _Msg)	{
			log(_Msg);
	}
		
	main()	{		
		declare Boolean Escape = False;
		i = 0; //index
		declare TimerRequest = Now - 10000;
		declare LatestClick = "";
		ButtonNames = ["buttonResume", "buttonExit", "ButtonMapInfo", /*"ButtonOpponents",*/ "ButtonRestartMap"];
				
		maxi = ButtonNames.count - 1;
		declare netwrite Boolean RestartMap for UI;
		
		declare Text UIState for LocalUser;
		UIState = "InGame";
		
		
		wait(Players.count != 0);
		declare netwrite Boolean ShowOpponents for UI;
	
		EnableMenuNavigation(True,False,Null,50);
	
		while(True) {
			if(LatestClick!="")	{
				UIState = "InGame";
				switch(LatestClick)	{
					case "buttonResume":	{
						ResumePlay();
					}
					case "ButtonRestartMap":	{
						RestartMap = True;
						ResumePlay();
					}
					case "ButtonOpponents":	{
						ResumePlay();
					}
					case "ButtonMapInfo":	{
						ShowCurChallengeCard();
						ResumePlay();
					}
					case "buttonExit":	{	
						Audio.ClearAllDelayedSoundsEvents();
						CloseInGameMenu(CMlScriptIngame::EInGameMenuResult::Quit);
						}
					}
					LatestClick = "";
				}
			
			
				foreach(Event,PendingEvents) {
					switch(Event.Type) {
						
						case CMlEvent::Type::MenuNavigation: {
							if(Event.MenuNavAction == CMlEvent::EMenuNavAction::Cancel) {
								ResumePlay();
							}
							if(Event.MenuNavAction == CMlEvent::EMenuNavAction::Right || Event.MenuNavAction == CMlEvent::EMenuNavAction::Down)	{
								MoveRight();	
							}
							if(Event.MenuNavAction == CMlEvent::EMenuNavAction::Left || Event.MenuNavAction == CMlEvent::EMenuNavAction::Up)	{
								MoveLeft();
							}
							if(Event.MenuNavAction == CMlEvent::EMenuNavAction::Select)	{
								LatestClick = ButtonNames[i];									
							}
						}
						case CMlEvent::Type::MouseClick: {
							if(ButtonNames.exists(Event.ControlId)) {
								LatestClick = Event.ControlId;
							}
							else	{
								if (Event.ControlId == "Right")	{
									MoveRight();
								}
								if (Event.ControlId == "Left")	{
									MoveLeft();
								}
							}
						}
					}
				}
				yield;
			}
		}
		-->
	</script>
	</manialink>""";
}





/// Boost / Freewheel / Special UI
Text DrawGameplayTextUI()	{
    return """<manialink version="3">
    
    <label id="boosterLabel" text="" translate="1" textemboss="1" halign="center" textsize="4" pos="0 60"/>
    
    <script><!--
    
    CSmPlayer GetOwner() {
        wait(GUIPlayer != Null || InputPlayer != Null);
        if (GUIPlayer != Null) return GUIPlayer;
        return InputPlayer;
    }
    
    Void SetBoosterLabelText(Text _Text)	{
        (Page.GetFirstChild("boosterLabel") as CMlLabel).SetText(_Text);
    }
    
    main()	{
        declare Player <=> GetOwner();
    
        while(True)	{
            if(Player == Null) continue;
            declare Boolean IsFreeWheel = Player.HandicapNoGasDuration > 0 && Player.HandicapNoGasDuration < 1600;
            declare Boolean IsTurbo2 = Player.EngineTurboRatio > 1.;
            if(IsFreeWheel)
                SetBoosterLabelText("Free wheeling!");
            else if(IsTurbo2)
                SetBoosterLabelText("Turbo 200%");
            else
                SetBoosterLabelText("");
            yield;
        }	
    }
    --></script>
    </manialink>
    """;
    }




/// CHRONO UI - Time / NbRespawns, speed and dist. info 
Text DrawChronoUI(Boolean _IsPlatform)	{
    return """<manialink version="3">
    
    <label id="nbRespawnsLabel" hidden="1" halign="center" style="TextRaceChrono" textsize="10" pos="0 -78" text="???"/>
    <label id="timeLabel" hidden="1" halign="center" style="TextRaceChrono" textsize="8" pos="0 -80" text="???"/>
    
    <frame pos="158 -80" id="SpeedFrame">
    <label id="speedLabel" halign="right" style="TextRaceChrono" textsize="8" pos="0 0" text="0"/>
    
    <label id="distLabel" halign="right" style="TextRaceChrono" textsize="2" pos="-6 4" text="0"/>
    <label halign="right" textsize="1" pos="0 3" text="m"/>
    </frame>
    
    <script><!--
    
    #Include "TextLib" as TextLib
    #Include "MathLib" as MathLib
    
    CSmPlayer GetOwner() {
        wait(GUIPlayer != Null || InputPlayer != Null);
            if (GUIPlayer != Null) return GUIPlayer;
        return InputPlayer;
    }
    
    Text TimeToTextMP(Integer _Time)	{
        declare Text temp = TextLib::TimeToText(_Time, True);
        if(_Time < 0)	{
            temp = TextLib::SubString(temp, 2, 7);
            return "-" ^ temp;
        }
        if(_Time < 600000)	{
            temp = TextLib::SubString(temp, 1, 7);
            return temp;
        }
        return temp;
    }
    
    main()	{
        declare Player <=> GetOwner();
        Player.TrustClientSimu = False;
        
        if({{{_IsPlatform}}})
            (Page.GetFirstChild("nbRespawnsLabel") as CMlLabel).Show();
        else
            (Page.GetFirstChild("timeLabel") as CMlLabel).Show();
            
        while(True)	{
            (Page.GetFirstChild("speedLabel") as CMlLabel).SetText(""^MathLib::FloorInteger(Player.Speed * 36 / 10));
            (Page.GetFirstChild("distLabel") as CMlLabel).SetText(""^MathLib::FloorInteger(Player.Distance));
            if({{{_IsPlatform}}})
                (Page.GetFirstChild("nbRespawnsLabel") as CMlLabel).SetText(""^Player.Score.NbRespawnsRequested);
            else
                (Page.GetFirstChild("timeLabel") as CMlLabel).SetText(TimeToTextMP(Player.CurrentRaceTime));
            yield;
        }
    }
    
    --></script>
    </manialink>
    """;
    }





/// CHECKPOINT UI - time, difference time
Text UpdateCheckPointUI(Integer _WaypointTime, Integer _AnotherTime)	{
    return """<manialink version="3">
    <frame z-index="-10" pos="0 28">
        <label halign="center" style="TextRaceChrono" textsize="4" pos="0 6" id="cas"/>
        <label halign="center" style="TextRaceChrono" textsize="4" pos="0 0" id="cas2"/>
    </frame>
    <script><!--
    
    #Include "TextLib" as TextLib
    Text TimeToTextMP(Integer _Time)	{
        declare Text temp = TextLib::TimeToText(_Time, True);
        if(_Time < 0)	{
            temp = TextLib::SubString(temp, 2, 7);
            return "-" ^ temp;
        }
        if(_Time < 600000)	{
            temp = TextLib::SubString(temp, 1, 7);
            return temp;
        }
        return temp;
    }
    
    main()	{
        Audio.PlaySoundEvent(CAudioManager::ELibSound::Checkpoint, 0, 1.);
        
        declare Time = {{{_WaypointTime}}};
        declare Time2 = {{{_AnotherTime}}};
        
        (Page.GetFirstChild("cas") as CMlLabel).SetText(TimeToTextMP(Time));
        
        if(Time2 == -1)	
            (Page.GetFirstChild("cas2") as CMlLabel).Hide();
    
        declare diff = Time - Time2;
        declare Text style;
        if(diff < 0)
            style = "$00F";
        else
            style = "$F00+";	
        (Page.GetFirstChild("cas2") as CMlLabel).SetText("" ^ style ^ TimeToTextMP(diff));
        sleep(1500);
        (Page.GetFirstChild("cas") as CMlLabel).Hide();
        (Page.GetFirstChild("cas2") as CMlLabel).Hide();
    }
    
    
    --></script>
    </manialink>
    """;
    }


Text DrawAfterRaceUI(Boolean _IsPlatform, Integer _CurScore, Integer _BestScore)	{
	return """
<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<manialink version="3">
<stylesheet>
	<style class="med" pos="-156 76.5" z-index="1" size="11 11"/>
	<style id="ButtonImprove ButtonQuit ButtonSaveReplay ButtonOpponents ButtonPausePlay ButtonRefresh" style="CardButtonMediumL" sizen="40 12" halign="center" valign="center"/>
	<style class="AfterRaceButtonText" textcolor="FFFFFFE7" sizen="60 12" textfont="Gotham/Gotham-Medium" halign="center" valign="center2" textsize="4"/>
</stylesheet>	

<frame id="SaveReplayFrame" z-index="20" scale="1.2" pos="0 0" hidden="1">
	<quad pos="0 -4" size="120 32" bgcolor="4B4B4BFF" halign="center" opacity=".8" id="SaveReplayBg" valign="center"/>
	<quad bluramount="0.5" pos="0 0" z-index="-5" size="120 40" id="blur_" style="Bgs1" substyle="BgEmpty" halign="center" valign="center"/>
	<quad pos="0 20" size="120 8" bgcolor="FFFFFFFF" halign="center" opacity=".75"/>
	<label pos="0 15.5" z-index="1" size="115 9" id="SaveReplayTitle" translate="1" halign="center" textsize="4" style="TextValueMediumSm" textfont="Gotham/Gotham-Bold" text="Save Replay" valign="center"/>
	
	<label pos="0 -14" z-index="1" size="50 7" text="Save" id="SaveReplaySave" translate="1" halign="center" valign="center" scriptevents="1" textcolor="FFFFFFE7"  focusareacolor2="B2B2B2FF" focusareacolor1="2E2E2ECB" textfont="Gotham/Gotham-Medium" textsize="3.5" opacity=".8"/>
	<quad pos="52 20" z-index="10" size="8 8" style="Icons64x64_1" substyle="Close" id="SaveReplayClose" scriptevents="1"/>
	<entry pos="-55 -2.5" z-index="2" size="110 7" default="MapAuthor(Time).Replay.Gbx" halign="left" scriptevents="1" textfont="Gotham/Gotham-Book" textsize="3" valign="center2" id="ReplayUrl"/>
	<label pos="-55 1" z-index="1" size="110 5" text="File" id="SaveReplayText" translate="1" halign="left" textfont="BiryaniDemiBold" textsize="3.5" valign="bottom"/>
</frame>

<frame id="NewRecordFrame" z-index="20" scale="1.2" pos="0 160" hidden="1">
	<quad pos="0 26" size="80 71" bgcolor="4B4B4BFF" halign="center" opacity=".8" id="MessageBg"/>
	<quad bluramount="0.5" pos="0 -5" z-index="-5" size="80 80" id="blur_" style="Bgs1" substyle="BgEmpty" halign="center" valign="center"/>
	<quad z-index="5" size="45 45" halign="center" valign="center" pos="0 1" id="Medal2" image="file://Media/Images/Medal/BlackMedal.dds"/>
	<quad z-index="-4" size="60 42.5" halign="center" pos="0 25" style="Bgs1" substyle="BgDialogBlur"/>
	
	<quad pos="0 35" size="80 9" bgcolor="FFFFFFFF" halign="center" opacity=".75"/>
	<label pos="0 30.5" z-index="1" size="100 5" id="MessageTitle" translate="1" halign="center" valign="center" textsize="5" style="TextValueMediumSm" textfont="Gotham/Gotham-Bold"/>
	<frame hidden="1">
	<quad z-index="-4" size="60 6" halign="center" pos="0 -26" style="Bgs1" substyle="BgDialogBlur"/>	
	<quad pos="24 -26" z-index="1" size="6 6" style="BgRaceScore2" substyle="Podium"/>
	<label pos="23 -29" z-index="1" size="16 6" text="???" id="PositionLabel" translate="1" halign="right" valign="center2"  textfont="BiryaniDemiBold" textsize="4" opacity=".8" focusareacolor2="2E2E2ECB"/>
	<label pos="-28 -29" z-index="1" size="16 6" text="0 SP" id="SPLabel" translate="1" halign="left" valign="center2"  textfont="BiryaniDemiBold" textsize="3" opacity=".8" focusareacolor2="2E2E2ECB" textcolor="6CFF00FF"/>
	</frame>
	<label pos="0 -38" z-index="1" size="35 7" text="OK" id="MessageClose" translate="1" halign="center" valign="center" scriptevents="1" textcolor="FFFFFFE7"  focusareacolor2="B2B2B2FF" focusareacolor1="2E2E2ECB" textfont="Gotham/Gotham-Medium" textsize="3" opacity=".8"/>
	<label pos="0 -8" z-index="1" size="58 9" text="You set a new personal record!" id="MessageText" translate="1" halign="center" textfont="Gotham/Gotham-Bold" textsize="2.5" autonewline="1"/>
	<label pos="-29 -24" z-index="1" size="30 5" text="Best time :" id="MessageTimeText" translate="1" textfont="Gotham/Gotham-Book" textsize="2.5" valign="bottom"/>
	<label pos="29 -24" z-index="1" size="25 5" text="None" id="AfterRaceRecordLabel2" translate="1" halign="right" textfont="BiryaniDemiBold" textsize="3" valign="bottom"/>
</frame>

<frame id="MedalInfo" pos="0 80" z-index="80">
	<quad size="320 18" bgcolor="000000FF" halign="center" valign="center" z-index="-1" id="medalsbg" pos="0 2" scriptevents="1"/>
	<label size="50 8" text="_map name" halign="right" valign="center2" textsize="4" pos="150 -2.5" id="MapNameAfterRace"/>
	<label size="80 8" text="_author" halign="right" valign="center2" textsize="3" pos="150 4" id="MapAuthorAfterRace" translate="1"/>
	<quad  size="25 25" halign="center" valign="center" pos="0 -3" id="MedalImg" style="MedalsBig" substyle="MedalSlot"/>
</frame>	


<frame id="ControlButtons" pos="0 -80" z-index="80">
	<quad size="320 18" bgcolor="000000FF" halign="center" valign="center" z-index="-1" id="buttonsbg" scriptevents="1" pos="0 -2"/>
	<label text="Improve" translate="1" id="ButtonImprove" style="CardButtonMediumL" scriptevents="1"/>
	<label size="0" halign="center" text="Save Replay" substyle="Replay" pos="112 0" textsize="4" valign="center" id="ButtonSaveReplay" style="CardButtonSmallXXL"/>
	<label pos="-120 0" text="Quit" translate="1" id="ButtonQuit" scriptevents="1"/>
	<quad pos="-60 0" id="ButtonRefresh" size="12 12" scriptevents="1" style="Icons64x64_1" substyle="ClipRewind"/>
	<quad pos="-42 0" id="ButtonPausePlay" size="12 12" scriptevents="1" style="Icons64x64_1" substyle="ClipPause"/>
</frame>
<script><!--

#Include "TextLib" as TextLib
#Include "ColorLib" as ColorLib
#Include "MathLib" as MathLib


declare Integer i;
declare CMlFrame NewRecordDialog;
declare CMlFrame SaveReplayDialog;


declare Integer Map_ObjectiveAuthor;
declare Integer Map_ObjectiveGold;
declare Integer Map_ObjectiveSilver;
declare Integer Map_ObjectiveBronze;


Text TimeToTextWithMilli(Integer _Time) {
    return TextLib::TimeToText(_Time, True)^TextLib::SubText(""^_Time, TextLib::Length(""^_Time)-1, 1);
}

Text GetRecordTypeText(Integer _Record)	{
	declare recordtext = "???";
	declare metadata Text GameMode for Map;
	if(GameMode == "Platform" || GameMode == "Stunts")	
		recordtext = ""^_Record;
	else
		recordtext = TimeToTextWithMilli(_Record);
	return recordtext;
}

Text GetPositionText(Integer _PositionInteger)	{
	declare posi = _PositionInteger;
	declare PositionExtraTexts = [".", "st", "nd", "rd"];
	if (posi < 1) return "???";
	
	if(posi>3)
		return TextLib::Compose("%1th", ""^_PositionInteger);
	else
		return posi^PositionExtraTexts[posi];
	return "";
}

Void SetMapMedals(Integer _count)	{
	declare MedalQuad = (Page.GetFirstChild("MedalImg") as CMlQuad);
	switch( _count)	{
		case 1:
			MedalQuad.Substyle = "MedalBronze";
		case 2:
			MedalQuad.Substyle = "MedalSilver";
		case 3:
			MedalQuad.Substyle = "MedalGold";
		case 4:
			MedalQuad.Substyle = "MedalNadeo";
		default:
			MedalQuad.Substyle = "MedalSlot";
	}
}

Void HoverAfterRaceButton(Integer _i)	{
	declare Buttons = ["ButtonImprove", "ButtonSaveReplay", "ButtonQuit"/*, "ButtonOpponents", "ButtonRefresh", "ButtonPausePlay"*/];
	declare Text color;
	
	if(_i!=-1)	{
		//select the item
		declare SelectedId = Buttons[_i];
		declare SelItem = (Page.GetFirstChild(SelectedId) as CMlLabel); //oznaci vybrane
		SelItem.Focus();
	}
}

Void Right()	{
	if(!NewRecordDialog.Visible && !SaveReplayDialog.Visible)	{
		if(i<2)
			i += 1;
		else
			i=0;
		HoverAfterRaceButton(i);
	}
	else
		HoverAfterRaceButton(-1);
}

Void Left()	{
	if(!NewRecordDialog.Visible && !SaveReplayDialog.Visible)	{
		if(i>0)
			i -= 1;
		else
			i=2;
		HoverAfterRaceButton(i);
	}
	else
		HoverAfterRaceButton(-1);
}

***OnKeyNav***
***
	if (!NewRecordDialog.Visible && !SaveReplayDialog.Visible)	{
		if(Event.MenuNavAction == CMlScriptEvent::EMenuNavAction::Left)
			Left();
		if(Event.MenuNavAction == CMlScriptEvent::EMenuNavAction::Right)
			Right();
		if(Event.MenuNavAction == CMlScriptEvent::EMenuNavAction::Select)
			SelectAfterRaceButton(i);
	}
	if (NewRecordDialog.Visible){
		if(Event.MenuNavAction == CMlScriptEvent::EMenuNavAction::Select || Event.MenuNavAction == CMlScriptEvent::EMenuNavAction::Cancel)	{
			HideNewRecordDialog();
		}
	}
	if (SaveReplayDialog.Visible)	{
	declare SaveButton = (Page.GetFirstChild("SaveReplaySave") as CMlLabel);
	declare ReplayUrlEntry = (Page.GetFirstChild("ReplayUrl") as CMlEntry);

		if(Event.MenuNavAction == CMlScriptEvent::EMenuNavAction::Up || Event.MenuNavAction == CMlScriptEvent::EMenuNavAction::Down)	{
			if(!SaveButton.IsFocused)
				SaveButton.Focus();
			else
				ReplayUrlEntry.Focus();
		}
		if(Event.MenuNavAction == CMlScriptEvent::EMenuNavAction::Select)	{
			
			if(!SaveButton.IsFocused)
				SaveButton.Focus();
			else	{
				SaveReplay();
				HideSaveReplayDialog();
			}
		}
		if(Event.MenuNavAction == CMlScriptEvent::EMenuNavAction::Cancel)	
			HideSaveReplayDialog();
	}

***
Boolean IsBetter(Integer _UserRecord, Integer _OldRecord)	{
	declare Boolean _PlatformMode = {{{_IsPlatform}}}; 
	if(_PlatformMode)	{
		if(_UserRecord <= _OldRecord)
			return True;
	}
	else
		if(_UserRecord < _OldRecord)
			return True;

	return False;
}


Integer GetMapMedals(Integer _RecordTime)	{
	declare UserRecord = _RecordTime;	
	 
	declare Integer NbMedals;
	if(IsBetter(UserRecord, Map_ObjectiveBronze))	{
		NbMedals = 1;
		if(IsBetter(UserRecord, Map_ObjectiveSilver))	{
			NbMedals = 2;
			if(IsBetter(UserRecord, Map_ObjectiveGold))	{
				NbMedals = 3;
				if(IsBetter(UserRecord, Map_ObjectiveAuthor) && Map_ObjectiveAuthor != Map_ObjectiveGold)	{
					NbMedals = 4;
				}
			}
		}
	}
	if(UserRecord==-1)
		NbMedals = 0;
	
	return NbMedals;
}

Void ShowSaveReplayDialog(Text _MapName)	{
	declare netread Integer CurTime for UI; 
	SaveReplayDialog.Show();
	declare ReplayUrlEntry = (Page.GetFirstChild("ReplayUrl") as CMlEntry); 
	ReplayUrlEntry.Value = _MapName^"_"^LocalUser.Login^"("^GetRecordTypeText(CurTime)^")";
	ReplayUrlEntry.Focus();
}

Void NewRecordDialog(Integer _MedalCount, Integer _PrevMedalCount, Integer _UserRecord)	{

	declare netread Integer Net_PositionInteger for UI;
	declare PositionText =  GetPositionText(Net_PositionInteger);
	declare netread Integer Net_SPInteger for UI;
	
	(Page.GetFirstChild("PositionLabel") as CMlLabel).SetText(PositionText);
	(Page.GetFirstChild("SPLabel") as CMlLabel).SetText(Net_SPInteger^" SP");
	NewRecordDialog.Show();
	Audio.PlaySoundEvent(CAudioManager::ELibSound::ShowDialog, 0, 1.);
	
	declare WonMedalCount = _MedalCount - _PrevMedalCount;
	
	declare Text MessageTitle;
	switch ( _MedalCount)	{
		case 1: MessageTitle = "Finished";
		case 2: MessageTitle = "Well done!";
		case 3: MessageTitle = "Impressive!!";
		case 4: MessageTitle = "Awesome!!!";	
	}
	(Page.GetFirstChild("MessageTitle") as CMlLabel).SetText(MessageTitle);
	if(WonMedalCount>1)
		(Page.GetFirstChild("MessageText") as CMlLabel).SetText(TextLib::Compose("You won %1 medals!", ""^WonMedalCount));
	else	{
		if(WonMedalCount==1)
		(Page.GetFirstChild("MessageText") as CMlLabel).SetText("You won 1 medal!");
		else
		(Page.GetFirstChild("MessageText") as CMlLabel).SetText("You set a new personal record!");
	}
	(Page.GetFirstChild("MessageClose") as CMlLabel).Focus();
	AnimMgr.Add(NewRecordDialog, "<frame pos='0 10' />", 350, CAnimManager::EAnimManagerEasing::SineIn);
}

Void HideSaveReplayDialog()	{
	AnimMgr.Add(SaveReplayDialog, "<frame pos='0 180' />", 250, CAnimManager::EAnimManagerEasing::SineIn);	
	AnimMgr.Add(SaveReplayDialog, "<frame hidden='1'/>", 350, CAnimManager::EAnimManagerEasing::SineIn);	
}

Void SelectAfterRaceButton(Integer _i)	{
	//declare persistent Boolean RestartMap for LocalUser;
	//declare netwrite Boolean ShowOpponents for UI;
	switch (_i) {
		case 0: {
			ShowInGameMenu();
			//Mode.StartTime = Now;
		}
		case 1: {
			ShowSaveReplayDialog(Map.MapInfo.Name);
		}
		case 2: {
			ShowInGameMenu();
		}
		/*case 3:{
			ShowOpponents = True;
		}
		case 4:{
			RestartMap0 = True;	
		}
		case 5:{
			if(UIState != "PauseAfterRace")	{
				UIState = "PauseAfterRace";
				ShowInGameMenu();
			}
			else {
				UIState = "AfterRace";	
				CloseInGameMenu(CMlScriptIngame::EInGameMenuResult::Resume);
			}
		}*/
	}	

}

Void HideNewRecordDialog()	{
	AnimMgr.Add(NewRecordDialog, "<frame pos='0 180'/>", 250, CAnimManager::EAnimManagerEasing::SineIn);	
	AnimMgr.Add(NewRecordDialog, "<frame hidden='1'/>", 350, CAnimManager::EAnimManagerEasing::SineIn);	
	Audio.PlaySoundEvent(CAudioManager::ELibSound::HideDialog, 0, 1.);
	HoverAfterRaceButton(0);
}

Void SaveReplay()	{
	
	HoverAfterRaceButton(-1);
	declare netwrite Text Net_SaveReplayUrl for UI;
	Net_SaveReplayUrl = (Page.GetFirstChild("ReplayUrl") as CMlEntry).Value;
	log("Saving replay...");
	HideNewRecordDialog();
}

Void PreLoad()	{
	declare netwrite Text Net_SaveReplayUrl for UI; 
	Net_SaveReplayUrl = "";
	EnableMenuNavigationInputs = False;

	SaveReplayDialog = (Page.GetFirstChild("SaveReplayFrame") as CMlFrame);
	NewRecordDialog = (Page.GetFirstChild("NewRecordFrame") as CMlFrame);

}

main()	{	
	PreLoad();
	declare AfterRaceButtons = ["ButtonImprove", "ButtonSaveReplay", "ButtonQuit"/*, "ButtonOpponents", "ButtonRefresh", "ButtonPausePlay"*/];

	//declare Map_ <=> Map.MapInfo;
	
	declare metadata Integer ObjectiveAuthor for Map;
	declare metadata Integer ObjectiveGold for Map;
	declare metadata Integer ObjectiveSilver for Map;
	declare metadata Integer ObjectiveBronze for Map;
	
	(Page.GetFirstChild("MapNameAfterRace") as CMlLabel).SetText(""^Map.MapInfo.Name);
	(Page.GetFirstChild("MapAuthorAfterRace") as CMlLabel).SetText(""^Map.MapInfo.AuthorNickName);
	
	if ({{{_IsPlatform}}}) {
		Map_ObjectiveAuthor = ObjectiveAuthor;
		Map_ObjectiveGold = ObjectiveGold;
		Map_ObjectiveSilver = ObjectiveSilver;		
		Map_ObjectiveBronze = ObjectiveBronze;
	}
	
	declare Integer UserRecordTemp;
	UserRecordTemp = {{{_CurScore}}};
	declare Integer BestScore = {{{_BestScore}}};

	sleep(10);
	declare MedalCount = GetMapMedals(UserRecordTemp);
	if(BestScore != UserRecordTemp)	{
		log("BestScore: "^BestScore ^ "UserRecordTemp" ^ UserRecordTemp);
		declare OldMedalCount = GetMapMedals(BestScore);
		NewRecordDialog(MedalCount, OldMedalCount, UserRecordTemp);
	}
	else
		HoverAfterRaceButton(i);
	SetMapMedals(MedalCount);
	//(Page.GetFirstChild("AfterRaceCurLabel") as CMlLabel).SetText(GetRecordTypeText(UserRecordTemp));

	sleep(200);
	EnableMenuNavigationInputs = True;

	while(True)	{	
		foreach (Event in PendingEvents) {

			if (Event.Type == CMlScriptEvent::Type::MenuNavigation) {
				+++OnKeyNav+++
			}
			if (Event.Type == CMlScriptEvent::Type::KeyPress) {
				if(Event.KeyName=="NumpadMultiply")
					log("dont hide ui unless you want to experience some nasty bugs. thanks");
			}
			if (Event.Type ==  CMlScriptEvent::Type::MouseOver) {
				if(!SaveReplayDialog.Visible && !NewRecordDialog.Visible)	{
					if(AfterRaceButtons.exists(Event.ControlId) )	{
						i = AfterRaceButtons.keyof(Event.ControlId);
						HoverAfterRaceButton(i)	;
					}
				}
				else	
					HoverAfterRaceButton(-1);
			}

			if (Event.Type ==  CMlScriptEvent::Type::MouseClick) {
				if(Event.ControlId == "MessageClose" || Event.ControlId == "SaveReplayClose")	{
					HideNewRecordDialog();
					HideSaveReplayDialog();
				}
				if(Event.ControlId == "SaveReplaySave")	{
					SaveReplay();
					HideSaveReplayDialog();
				}
				if(AfterRaceButtons.exists(Event.ControlId))	{
					SelectAfterRaceButton(i);
				}
			}
		}
		yield;
	}	
}
--></script>

</manialink>
	
	""";
}