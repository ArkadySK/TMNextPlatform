/// Solo mode for Platform gamemode for TMNext
/// Goal: Least nb of respawns
///
#Extends "Modes/Nadeo/Trackmania/Base/TrackmaniaRoundsBase.Script.txt"

#Include "TextLib" as TextLib
#Include "MathLib" as MathLib

#Include "Libs/TrackMania/ModeManialinks.Script.txt" as ModeManialinks

//IsPlatform = True: Platform mode; IsPlatform = False: Race mode
#Setting S_ForcePlatform False
//Enable this setting when you are in local multi or online
#Setting S_IsInLocalMulti False
//Show speedometer in race
#Setting S_ShowSpeed False
//Default font name for UI, use "GameFontRegular" for default font; empty for chrono style font
#Setting S_FontName "GameFontRegular"

#Const RecordsPath "TMNextPlatform\\Records\\AutoSave"

declare CUILayer G_ChronoLayer;	
declare CUILayer G_CPLayer;
declare CUILayer G_GameplayLayer;
declare CUILayer G_PauseMenuLayer;
declare CUILayer G_MusicPlayerLayer;
declare CUILayer G_OpponentScoresLayer;
declare CUILayer G_AfterRaceLayer;
declare Boolean G_IsFirstStart;
declare Text PrevNet_SaveReplayUrl;

declare CGhost G_RecordGhost;
declare CGhost G_OutroGhost;
declare Integer G_MapRecord;
declare Boolean IsPlatform;

// Saves ghost to TMNextPlatform/Records/ folder 
Void SaveRecordGhost(CGhost _recordGhost)	{
	DataFileMgr.Replay_Save(RecordsPath ^ Map.MapInfo.Name ^ ".Replay.Gbx", Map, _recordGhost);
}

// Refreshes best score ghost
Void RefreshRecordGhost()	{
	if (G_RecordGhost != Null)
	GhostMgr.Ghost_Remove(G_RecordGhost.Id);
	declare MapGhosts = DataFileMgr.Replay_Load(RecordsPath ^ Map.MapInfo.Name ^ ".Replay.Gbx");
	//wait(MapGhosts.IsProcessing);
	MB_Sleep(1000);
	if(!MapGhosts.HasSucceeded)
		return;
	
	declare MapGhost = MapGhosts.Ghosts[0];
	MapGhost.Nickname = TextLib::GetTranslatedText("Personal best");
	if(MapGhost!=Null)	{
		GhostMgr.Ghost_Add(MapGhost, True, 0);
		G_RecordGhost = MapGhost;
	}
}

// Gets time (int) or nb respawns (int) from record ghost
Integer GetRecordFromGhost(CGhost _RecordGhost)	{
	if (_RecordGhost == Null)
			return -1;

	if(IsPlatform == True)	
		return _RecordGhost.Result.NbRespawns;
		
	return -1;
}

// Saves ghosts if improvement
Void FinishRace(CSmPlayer _Player, CGhost _OutroGhost)	{
	G_OpponentScoresLayer.ManialinkPage = "";
	Player_SetCurRaceAsPrevRace(_Player);
	declare IsBetter = True;
	
// In platform gamemode:
	if(IsPlatform)	{
		// If NbRespawns is worse, ignore record: 
		if(_Player.Score.NbRespawnsRequested > G_MapRecord && G_MapRecord != -1)
			IsBetter = False;
			
		// Check for time improvement when nbRespawns is equal:	
		if(_Player.Score.NbRespawnsRequested == G_MapRecord && G_MapRecord != -1 && G_RecordGhost != Null)	{
			wait(_OutroGhost != Null);
			if(_OutroGhost.Result.Time > G_RecordGhost.Result.Time)	{
				IsBetter = False;
			}	
		}	
		
		if(IsBetter)	{
			G_MapRecord = _Player.Score.NbRespawnsRequested;
			wait(_OutroGhost != Null);
			// Fixes NbRespawns in the saved replay
			_OutroGhost.Result.NbRespawns = G_MapRecord;
			SaveRecordGhost(_OutroGhost);
			G_RecordGhost = _OutroGhost;
			
			declare persistent Boolean Menu_RefreshRecords for Users[0];
			Menu_RefreshRecords = True;
		}
	}
	// In race gamemode:
	else	{
		// If time is worse
		if(_Player.EndTime > G_MapRecord && G_MapRecord != -1)
			IsBetter = False;
		else	{
			G_MapRecord = _Player.EndTime;
			wait(_OutroGhost != Null);
		}			
	}
	
	Player_SetCurRaceAsBestRace(_Player);
	Player_ClearRaceWaypointTimes(_Player);
	Player_BeginNewRace(_Player, 0);
	Player_SetFinishTime(_Player, _Player.EndTime);
	
	G_AfterRaceLayer.ManialinkPage = ModeManialinks::DrawAfterRaceUI(IsPlatform, _Player.Score.NbRespawnsRequested, G_MapRecord, IsBetter);
}

Void ReloadUI()	{
	G_OpponentScoresLayer.ManialinkPage = "";	
	if(G_MapRecord != -1)
		G_OpponentScoresLayer.ManialinkPage = ModeManialinks::DrawOpponentScoresUI(""^G_MapRecord);
	else
		G_OpponentScoresLayer.ManialinkPage = ModeManialinks::DrawOpponentScoresUI("???");
}

Void InitMusicPlayer()	{
	if(S_IsInLocalMulti)
		return;
	G_MusicPlayerLayer = UIManager.UILayerCreate();
		declare Player_UI = UIManager.GetUI(Players[0]);
	Player_UI.UILayers.add(G_MusicPlayerLayer);
	G_MusicPlayerLayer.ManialinkPage = ModeManialinks::DrawEmptyMusicPlayerLayer();
}

Void LoadMusicPlayer()	{
	if(S_IsInLocalMulti)
		return;
	declare persistent Boolean Persistent_DisableMusicPlayer for Users[0];
	if(!Persistent_DisableMusicPlayer)
		G_MusicPlayerLayer.ManialinkPage = ModeManialinks::DrawMusicPlayerLayer();
	else 
		G_MusicPlayerLayer.ManialinkPage = "";
}

Void InitialUILoad()	{
	UseClans = False;
	UseLaunchedCheckpoints = False;
	UIManager.UIAll.ScoreTableVisibility = CUIConfig::EVisibility::ForcedHidden;
	UIManager.UIAll.OverlayHideSpectatorInfos = True;

	G_ChronoLayer = UIManager.UILayerCreate();
	G_CPLayer = UIManager.UILayerCreate();
	G_GameplayLayer = UIManager.UILayerCreate();
	G_PauseMenuLayer = UIManager.UILayerCreate();
	G_OpponentScoresLayer = UIManager.UILayerCreate();
	G_AfterRaceLayer = UIManager.UILayerCreate();

	declare Player_UI = UIManager.GetUI(Players[0]);
	Player_UI.UILayers.add(G_ChronoLayer); 
	Player_UI.UILayers.add(G_CPLayer); 
	Player_UI.UILayers.add(G_GameplayLayer); 
	if(!S_IsInLocalMulti)	
		Player_UI.UILayers.add(G_PauseMenuLayer);	
	Player_UI.UILayers.add(G_OpponentScoresLayer);
	Player_UI.UILayers.add(G_AfterRaceLayer);

	declare persistent Boolean Persistent_ShowSpeed for Users[0];
	declare ShowSpeed = (S_IsInLocalMulti && S_ShowSpeed) || (!S_IsInLocalMulti && Persistent_ShowSpeed);

	ModeManialinks::SetCustomFontName(S_FontName);

	G_ChronoLayer.ManialinkPage = ModeManialinks::DrawChronoUI(IsPlatform, ShowSpeed);
	G_GameplayLayer.ManialinkPage = ModeManialinks::DrawGameplayTextUI();
	G_PauseMenuLayer.ManialinkPage = ModeManialinks::PauseMenu();
	G_PauseMenuLayer.Type = CUILayer::EUILayerType::InGameMenu;
}

Void Restart()	{
	G_AfterRaceLayer.ManialinkPage = "";
	ReloadUI();
	if (!S_IsInLocalMulti)
		RefreshRecordGhost();
	G_MapRecord = GetRecordFromGhost(G_RecordGhost);
	MB_Sleep(100);
	UnspawnPlayer(Players[0]);
	ReloadUI();
}

Void EndRaceSequence(Text _text, CPlayer _Player)	{
	declare Player_UI = UIManager.GetUI(_Player);
	Player_UI.ScoreTableVisibility = CUIConfig::EVisibility::ForcedVisible;
	Player_UI.UISequence = CUIConfig::EUISequence::Finish;
	Player_UI.BigMessage = _text;
}

Void UpdateCpTimes(CSmPlayer Player, Integer WaypointTime)	{
	declare Integer CpIndex for Player;
	CpIndex += 1;
	declare BestCPTime = -1;
	if (G_RecordGhost != Null)
		if(G_RecordGhost.Result.Checkpoints.count > CpIndex)
			BestCPTime = G_RecordGhost.Result.Checkpoints[CpIndex-1];
			
	G_CPLayer.ManialinkPage = ModeManialinks::UpdateCheckPointUI(WaypointTime, BestCPTime);
}

//Shows after race sequence
Void AfterRace(CGhost _OutroGhost)	{
	declare UI = UIManager.GetUI(Players[0]);
	UI.UISequence = CUIConfig::EUISequence::EndRound;
	//UI.ForceSpectator = True;
	UI.Spectator_SetAutoTarget_All();
	
	StartTime = Now;
	MB_Sleep(100);
	if(_OutroGhost == Null)
		return;
	UI.Spectator_SetForcedTarget_Ghost(_OutroGhost.Id);
	//Ghost_Add(_OutroGhost, False);
	UI.SpectatorForceCameraType = 0;
}

Void AutoSelectGamemode() {
	if(S_ForcePlatform) {
		IsPlatform = True;
		return;
	}
	
	if(TextLib::Find(Map.MapType, "platform", False, False))
		IsPlatform = True;
	else
		IsPlatform = False;
}
	
***Match_InitMap***
***
AutoSelectGamemode();
InitMusicPlayer();
if(!S_IsInLocalMulti)
	Ghost_RemoveAll();
Scores_ClearAll();
InitialUILoad();
Restart();
if(IsPlatform)
	Scores_SetSortCriteria(CSmMode::ESmScoreSortOrder::Respawns);
else
	Scores_SetSortCriteria(CSmMode::ESmScoreSortOrder::BestRace);
G_IsFirstStart = True;
***

***Match_PlayLoop***
***

if(G_IsFirstStart)	{
	G_IsFirstStart = False;
	LoadMusicPlayer();
}

declare Player <=> Players[0];
	
declare Boolean IsFinished for Player;
declare Integer CpIndex for Player;

declare UI = UIManager.GetUI(Player);
declare netread Boolean Net_RestartRequested for UI;
declare netread Boolean Net_QuitRequested for UI;
declare netread Text Net_SaveReplayUrl for UI;

if(Net_RestartRequested)	{
	Restart();
}

if(Net_QuitRequested)	{
	MB_StopServer();
}

if(Net_SaveReplayUrl != PrevNet_SaveReplayUrl)	{
	PrevNet_SaveReplayUrl = Net_SaveReplayUrl;
	if(Net_SaveReplayUrl != "")	{
		log("Saving replay: " ^ Net_SaveReplayUrl);
		DataFileMgr.Replay_Save(Net_SaveReplayUrl, Map, G_OutroGhost);
	}
}

if(Player.StartTime == Now /*&& G_AfterRaceLayer.ManialinkPage != ""*/)	{
	IsFinished = False;
	CpIndex = 0;	
	UI.BigMessage = "";
	G_AfterRaceLayer.ManialinkPage = "";
}


foreach (Event in PendingEvents) {
	
	// Waypoint
	if (Event.Type == CSmModeEvent::EType::OnPlayerTriggersWaypoint) {
		
		declare Integer PrevPlayer_Score_NbRespawnsRequested for Event.Player;

		UpdateCpTimes(Event.Player, Event.WaypointTime);
		
		if (Event.IsFinish) {
			PassOn(Event);
			
			EndRaceSequence("", Event.Player);
			declare Boolean IsFinished for Event.Player;
			
			if(!S_IsInLocalMulti)
			{
				G_OutroGhost = Ghost_RetrieveFromPlayer(Event.Player);
				G_OutroGhost.Result.NbRespawns = Event.Player.Score.NbRespawnsRequested;
				declare LastGhost = Ghost_RetrieveFromPlayer(Event.Player);
				wait(G_OutroGhost != Null && LastGhost != Null);
				G_OutroGhost.Nickname = "Last Race: " ^ Event.Player.Name;					
				FinishRace(Event.Player, LastGhost);		
				IsFinished = True;	
				MB_Sleep(2700);
				Ghost_RemoveAll();
			}
			if(S_IsInLocalMulti){
				MB_Sleep(2700);
				Restart();
			}
			AfterRace(G_OutroGhost);
			
		}
	}
}
***
Void DoNothing()	{
}