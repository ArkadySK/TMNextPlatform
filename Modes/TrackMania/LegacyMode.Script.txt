/// Solo mode for Platform gamemode for TMNext
/// Goal: Least nb of respawns
///
#Extends "Libs/Nadeo/TMxSM/Race/ModeRounds.Script.txt"

#Include "TextLib" as TextLib
#Include "MathLib" as MathLib

#Include "Libs/TrackMania/ModeManialinks.Script.txt" as ModeManialinks


#Setting S_IsPlatform True

declare CUILayer G_ChronoLayer;	
declare CUILayer G_CPLayer;
declare CUILayer G_GameplayLayer;
declare CUILayer G_PauseMenuLayer;

declare CGhost G_RecordGhost;
declare CGhost G_OutroGhost;
declare Integer G_MapRecord;



Void SaveRecordGhost(CGhost _recordGhost)	{
	DataFileMgr.Replay_Save("PlatformRecords\\AutoSave"^Map.MapInfo.Name^".Replay.Gbx", Map, _recordGhost);
}


Void RefreshRecordGhost()	{
	if (G_RecordGhost != Null)
	GhostMgr.Ghost_Remove(G_RecordGhost.Id);
	declare MapGhosts = DataFileMgr.Replay_Load("PlatformRecords\\AutoSave"^Map.MapInfo.Name^".Replay.Gbx");
	//wait(MapGhosts.IsProcessing);
	MB_Sleep(1000);
	if(!MapGhosts.HasSucceeded)
		return;
	
	declare MapGhost = MapGhosts.Ghosts[0];
	MapGhost.Nickname = "Personal Best: ";
	if(MapGhost!=Null)	{
		GhostMgr.Ghost_Add(MapGhost, True, 0);
		G_RecordGhost = MapGhost;
	}
}


Integer GetRecordFromGhost(CGhost _recordGhost)	{
	if(S_IsPlatform == True || _recordGhost == Null)	{
		if (_recordGhost == Null)
			return -1;
		return _recordGhost.Result.NbRespawns;
	}
	
	return ScoreMgr.Map_GetRecord(NullId, Map.MapInfo.MapUid, "");
}


// Saves ghosts if improvement
Void FinishRace(CSmPlayer _Player, CGhost _OutroGhost)	{
	Player_SetCurRaceAsPrevRace(_Player);
// In platform gamemode:
	if(S_IsPlatform)	{
		// If NbRespawnsRequested is worse 
		if(_Player.Score.NbRespawnsRequested > G_MapRecord && G_MapRecord != -1)
			return;
			
		G_MapRecord = _Player.Score.NbRespawnsRequested;
		wait(_OutroGhost != Null);
		// Fixes NbRespawns in the saved replay
		_OutroGhost.Result.NbRespawns = G_MapRecord;
		SaveRecordGhost(_OutroGhost);
	}
	// In race gamemode:
	else	{
		// If time is worse
		if(_Player.EndTime > G_MapRecord && G_MapRecord != -1)
			return;
					
		G_MapRecord = _Player.EndTime;
		wait(_OutroGhost != Null);	
		ScoreMgr.Map_SetNewRecord_v2(NullId, Map.MapInfo.MapUid, "", "", _OutroGhost);
	}
	
	Player_SetCurRaceAsBestRace(_Player);
	Player_ClearRaceWaypointTimes(_Player);
	Player_SetFinishTime(_Player, _Player.EndTime);
}

Void PreLoadUI()	{
	UseClans = False;
	UseLaunchedCheckpoints = False;
	UIManager.UIAll.ScoreTableOnlyManialink = True;
	UIManager.UIAll.ScoreTableVisibility = CUIConfig::EVisibility::Normal;
}


Void EndRaceSequence(Text _text, CPlayer _Player)	{
	declare Player_UI = UIManager.GetUI(_Player);
	Player_UI.ScoreTableVisibility = CUIConfig::EVisibility::ForcedVisible;
	Player_UI.UISequence = CUIConfig::EUISequence::Finish;
	Player_UI.BigMessage = _text;
}

//Shows after race sequence
Void AfterRace(CGhost _OutroGhost)	{
	
	declare Boolean IsReadyToUnspawn for Players[0];
	IsReadyToUnspawn = False;
	declare UI = UIManager.GetUI(Players[0]);
	UI.UISequence = CUIConfig::EUISequence::EndRound;
	//UI.ForceSpectator = True;
	UI.Spectator_SetAutoTarget_All();
	//UnspawnPlayer(Players[0]);
	
	log("entering after race sequence");
	StartTime = Now + 2700;
	//Ghost_Add(_OutroGhost, False, 100);
	MB_Sleep(100);
	log(Ghost_IsReplayOver(_OutroGhost.Id));
	UI.Spectator_SetForcedTarget_Ghost(_OutroGhost.Id);
	Ghost_Add(_OutroGhost, False);
	UI.SpectatorForceCameraType = 0;	
}
	
***Match_InitMap***
***
PreLoadUI();

Ghost_RemoveAll();
G_MapRecord = GetRecordFromGhost(G_RecordGhost);

log("loaded map record: " ^G_MapRecord);

Scores_ClearAll();
if(S_IsPlatform)
	Scores_SetSortCriteria(CSmMode::ESmScoreSortOrder::Respawns);
else
	Scores_SetSortCriteria(CSmMode::ESmScoreSortOrder::BestRace);


G_ChronoLayer = UIManager.UILayerCreate();
G_CPLayer = UIManager.UILayerCreate();
G_GameplayLayer = UIManager.UILayerCreate();
G_PauseMenuLayer = UIManager.UILayerCreate();

foreach(Player in Players)  {
	declare Integer NbRespawnsRecord for Player;
	
	//	Scores.all.NbRespawnsRequested = 999;
	
	NbRespawnsRecord = 999;

 	declare Player_UI = UIManager.GetUI(Player);
	Player_UI.UILayers.add(G_ChronoLayer); 
	Player_UI.UILayers.add(G_CPLayer); 
	Player_UI.UILayers.add(G_GameplayLayer);
	Player_UI.UILayers.add(G_PauseMenuLayer);
	
	G_ChronoLayer.ManialinkPage = ModeManialinks::DrawChronoUI(S_IsPlatform);
	G_GameplayLayer.ManialinkPage = ModeManialinks::DrawGameplayTextUI();
	G_PauseMenuLayer.ManialinkPage = ModeManialinks::PauseMenu();

	G_PauseMenuLayer.Type = CUILayer::EUILayerType::InGameMenu;

}
***

***Match_Start***
***
log("A");
RefreshRecordGhost();
***

***Match_PlayLoop***
***

declare Player <=> Players[0];
	
declare Boolean IsFinished for Player;
declare Integer NbRespawnsRecord for Player;
declare Integer TimeToUnspawn for Player;
declare Integer cpindex for Player;
declare Boolean IsReadyToUnspawn for Player;

declare Player_UI = UIManager.GetUI(Player);
if(Player.StartTime == Now)	{
	RefreshRecordGhost();
	IsFinished = False;
	cpindex = 0;	
	Player_UI.BigMessage = "";
}


foreach (Event in PendingEvents) {
	
	// Waypoint
	if (Event.Type == CSmModeEvent::EType::OnPlayerTriggersWaypoint) {
		
		declare Integer PrevPlayer_Score_NbRespawnsRequested for Event.Player;
		declare Integer cpindex for Event.Player;
		
		cpindex += 1;
		declare BestCPTime = -1;
		
		if(Event.Player.Score.BestRaceTimes.count > cpindex)
			BestCPTime = Event.Player.Score.BestRaceTimes[cpindex-1];
		else
			BestCPTime = -1;
		
  		G_CPLayer.ManialinkPage = ModeManialinks::UpdateCheckPointUI(Event.WaypointTime, BestCPTime);
		declare Player_UI = UIManager.GetUI(Event.Player);

		if (Event.IsFinish) {
			PassOn(Event);
			
			EndRaceSequence("", Event.Player);
			declare Boolean IsFinished for Event.Player;
			declare Integer TimeToUnspawn for Event.Player;	
			TimeToUnspawn = Now + 2000;
			
			G_OutroGhost = Ghost_RetrieveFromPlayer(Event.Player);
			declare LastGhost = Ghost_RetrieveFromPlayer(Event.Player);
			wait(G_OutroGhost != Null && LastGhost != Null);
			G_OutroGhost.Nickname = "Last Race: " ^ Event.Player.Name;
						
			FinishRace(Event.Player, LastGhost);	
			IsFinished = True;	
			MB_Sleep(2700);
			Ghost_RemoveAll();
			AfterRace(G_OutroGhost);
		}
	}
}
***
Void DoNothing()	{
}