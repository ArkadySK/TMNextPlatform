/// Solo mode for Platform gamemode for TMNext
/// Goal: Least nb of respawns
///
#Extends "Libs/Nadeo/TMxSM/Race/ModeRounds.Script.txt"
#Include "Libs/Nadeo/ScoresTable2.Script.txt" as ST2

#Include "TextLib" as TextLib
#Include "MathLib" as MathLib

#Setting S_IsPlatform True


Text PauseMenu()	{
	return """<manialink version="3">
	<stylesheet>
		<style id="buttonResume buttonExit ButtonNextMap ButtonRestartMap ButtonOpponents ButtonRankings ButtonMapInfo ButtonShowSkins QUITgame" textcolor="FFFFFFE7" focusareacolor2="2E2E2ECB" focusareacolor1="2E2E2ECB" sizen="55 17" style="CardButtonSmallXXXL" scale="1"/>
		</stylesheet>
	<frame z-index="100">
	
		<quad pos="0 -96" z-index="-50" size="320 200" halign="center" valign="bottom" bgcolor="1C1C1C5C" style="Bgs1" substyle="BgGradBottom" scriptevents="1" opacity=".4"/>
		
		<frame id="LockFrame" pos="0 0" z-index="90" hidden="1">
			<quad pos="0 -1" z-index="1" size="165 30" halign="center" valign="center" id="bg00" style="Bgs1" substyle="BgDialogBlur"/>
			
			<label  z-index="3" size="150 12.8" pos="-75 9.49" translate="1" autonewline="1" id="LockR" text="Locked" textsize="2.5"/>		
			
			<label pos="0 -10.5" z-index="2" size="50 8" text="Close" halign="center" translate="1" id="ZamocekZrus" scriptevents="1" valign="center" style="CardButtonMediumXL"/>
			<quad pos="0 0" z-index="0" size="400 200" halign="center" valign="center" scriptevents="1" style="Bgs1" substyle="BgEmpty"/>
		</frame>
	
		<frame id="HideOpt" z-index="20" pos="0 25" scale="1.2">
			
					
				
			<frame pos="0 -10" scale=".85" id="menubuttons">	
					
				<label pos="0 19" z-index="0" size="119 7" text="Race menu" style="TextRankingsBig" translate="1" halign="center" textsize="3" valign="center"/>
				<quad pos="0 -46" z-index="-5" size="120 70" bgcolor="FFFA" style="Bgs1" substyle="BgDialogBlur" halign="center" valign="bottom"/>	
				<quad pos="0 27" z-index="-3" size="126 15" bgcolor="FFFA" halign="center" style="Bgs1" substyle="BgGlow2"/>	
				
				<label id="buttonResume" text="Continue" posn="-30 -38" translate="1" valign="center2" z-index="2" textsize="4" scriptevents="1" halign="center"  style="CardButtonMediumL" scale="1.1"/>	
					
				<label id="ButtonRestartMap" text="Restart" pos="0 -13" halign="center" valign="center2" textsize="4" translate="1" scriptevents="1"/>	
				<label id="ButtonOpponents" hidden="1" text="Select Opponents" pos="0 -6" halign="center" valign="center2" textsize="4" translate="1" scriptevents="1"/>	
					
				<label id="ButtonMapInfo" text="Information" pos="0 1" halign="center" valign="center2" textsize="4" translate="1" scriptevents="1"/>	
				
				<label text="Leave" textsize="4" translate="1" id="buttonExit" scriptevents="1" z-index="10" halign="center" valign="center2" focusareacolor1="DD4646CF" pos="30 -38" style="CardButtonMediumL" scale="1.1"/>
			</frame>	
		</frame>
	</frame>
	<script><!--
	#Include "TextLib" as TextLib
	#Include "MathLib" as MathLib
	#Include "AnimLib" as AnimLib
	declare Integer i;
	declare Integer maxi;
	declare CMlFrame Buttons;
	declare Text[] ButtonNames;
	
	Void ResumePlay()	{
		i=0;
		CloseInGameMenu(CMlScriptIngame::EInGameMenuResult::Resume);
		Audio.PlaySoundEvent(CAudioManager::ELibSound::HideDialog, 0, 1.);
	}
	
	Void FocusButton(Integer _i)	{
		declare ButtonName = ButtonNames[_i];
		(Page.GetFirstChild(ButtonName) as CMlLabel).Focus();
		log(ButtonName);
	
	}
	
	Void MoveRight()	{
	
		if(!Page.GetFirstChild("LockFrame").Visible)	{
			if(i!=maxi)	{
				i += 1;
			}
			else
				i = 0;
		}
		FocusButton(i);
	}
	
	Void MoveLeft()	{
		
		if(!Page.GetFirstChild("LockFrame").Visible)	{
			if(i!=0)	{
				i -= 1;
			}
			else
				i = ButtonNames.count -1;
		}
		FocusButton(i);
	}
	
	Void ShowMessage(Text _Msg)	{
			log(_Msg);
	}
		
	main()	{		
		declare Boolean Escape = False;
		i = 0; //index
		declare TimerRequest = Now - 10000;
		declare LatestClick = "";
		ButtonNames = ["buttonResume", "buttonExit", "ButtonMapInfo", /*"ButtonOpponents",*/ "ButtonRestartMap"];
				
		maxi = ButtonNames.count - 1;
		declare netwrite Boolean RestartMap for UI;
		
		declare Text UIState for LocalUser;
		UIState = "InGame";
		
		
		wait(Players.count != 0);
		declare netwrite Boolean ShowOpponents for UI;
	
		EnableMenuNavigation(True,False,Null,50);
	
		while(True) {
			if(LatestClick!="")	{
				UIState = "InGame";
				switch(LatestClick)	{
					case "buttonResume":	{
						ResumePlay();
					}
					case "ButtonRestartMap":	{
						RestartMap = True;
						ResumePlay();
					}
					case "ButtonOpponents":	{
						ResumePlay();
					}
					case "ButtonMapInfo":	{
						ShowCurChallengeCard();
						ResumePlay();
					}
					case "buttonExit":	{	
						Audio.ClearAllDelayedSoundsEvents();
						CloseInGameMenu(CMlScriptIngame::EInGameMenuResult::Quit);
						}
					}
					LatestClick = "";
				}
			
			
				foreach(Event,PendingEvents) {
					switch(Event.Type) {
						
						case CMlEvent::Type::MenuNavigation: {
							if(Event.MenuNavAction == CMlEvent::EMenuNavAction::Cancel) {
								ResumePlay();
							}
							if(Event.MenuNavAction == CMlEvent::EMenuNavAction::Right || Event.MenuNavAction == CMlEvent::EMenuNavAction::Down)	{
								MoveRight();	
							}
							if(Event.MenuNavAction == CMlEvent::EMenuNavAction::Left || Event.MenuNavAction == CMlEvent::EMenuNavAction::Up)	{
								MoveLeft();
							}
							if(Event.MenuNavAction == CMlEvent::EMenuNavAction::Select)	{
								LatestClick = ButtonNames[i];									
							}
						}
						case CMlEvent::Type::MouseClick: {
							if(ButtonNames.exists(Event.ControlId)) {
								LatestClick = Event.ControlId;
							}
							else	{
								if (Event.ControlId == "Right")	{
									MoveRight();
								}
								if (Event.ControlId == "Left")	{
									MoveLeft();
								}
							}
						}
					}
				}
				yield;
			}
		}
		-->
	</script>
	</manialink>""";
}


Text DrawGameplayTextUI()	{
return """<manialink version="3">

<label id="boosterLabel" text="" translate="1" textemboss="1" halign="center" textsize="4" pos="0 60"/>

<script><!--

CSmPlayer GetOwner() {
    wait(GUIPlayer != Null || InputPlayer != Null);
	if (GUIPlayer != Null) return GUIPlayer;
    return InputPlayer;
}

Void SetBoosterLabelText(Text _Text)	{
	(Page.GetFirstChild("boosterLabel") as CMlLabel).SetText(_Text);
}

main()	{
	declare Player <=> GetOwner();

	while(True)	{
		if(Player == Null) continue;
		declare Boolean IsFreeWheel = Player.HandicapNoGasDuration > 0 && Player.HandicapNoGasDuration < 1600;
		declare Boolean IsTurbo2 = Player.EngineTurboRatio > 1.;
		if(IsFreeWheel)
			SetBoosterLabelText("Free wheeling!");
		else if(IsTurbo2)
			SetBoosterLabelText("Turbo 200%");
		else
			SetBoosterLabelText("");
		yield;
	}	
}
--></script>
</manialink>
""";
}


Text DrawChronoUI()	{
return """<manialink version="3">

<label id="nbRespawnsLabel" hidden="1" halign="center" style="TextRaceChrono" textsize="10" pos="0 -78" text="???"/>
<label id="timeLabel" hidden="1" halign="center" style="TextRaceChrono" textsize="8" pos="0 -80" text="???"/>

<frame pos="158 -80" id="SpeedFrame">
<label id="speedLabel" halign="right" style="TextRaceChrono" textsize="8" pos="0 0" text="0"/>

<label id="distLabel" halign="right" style="TextRaceChrono" textsize="2" pos="-6 4" text="0"/>
<label halign="right" textsize="1" pos="0 3" text="m"/>
</frame>

<script><!--

#Include "TextLib" as TextLib
#Include "MathLib" as MathLib

CSmPlayer GetOwner() {
    wait(GUIPlayer != Null || InputPlayer != Null);
		if (GUIPlayer != Null) return GUIPlayer;
    return InputPlayer;
}

Text TimeToTextMP(Integer _Time)	{
	declare Text temp = TextLib::TimeToText(_Time, True);
	if(_Time < 0)	{
		temp = TextLib::SubString(temp, 2, 7);
		return "-" ^ temp;
	}
	if(_Time < 600000)	{
		temp = TextLib::SubString(temp, 1, 7);
		return temp;
	}
	return temp;
}

main()	{
	declare Player <=> GetOwner();
	Player.TrustClientSimu = False;
	
	if({{{S_IsPlatform}}})
		(Page.GetFirstChild("nbRespawnsLabel") as CMlLabel).Show();
	else
		(Page.GetFirstChild("timeLabel") as CMlLabel).Show();
		
	while(True)	{
		(Page.GetFirstChild("speedLabel") as CMlLabel).SetText(""^MathLib::FloorInteger(Player.Speed * 36 / 10));
		(Page.GetFirstChild("distLabel") as CMlLabel).SetText(""^MathLib::FloorInteger(Player.Distance));
		if({{{S_IsPlatform}}})
			(Page.GetFirstChild("nbRespawnsLabel") as CMlLabel).SetText(""^Player.Score.NbRespawnsRequested);
		else
			(Page.GetFirstChild("timeLabel") as CMlLabel).SetText(TimeToTextMP(Player.CurrentRaceTime));
		yield;
	}
}

--></script>
</manialink>
""";
}

Text UpdateCheckPointUI(Integer _WaypointTime, Integer _AnotherTime)	{
return """<manialink version="3">
<frame z-index="-10">
	<label halign="center" style="TextRaceChrono" textsize="4" pos="0 20" id="cas" text=""/>
	<label halign="center" style="TextRaceChrono" textsize="4" pos="0 15" id="cas2" text=""/>
</frame>
<script><!--

#Include "TextLib" as TextLib
Text TimeToTextMP(Integer _Time)	{
	declare Text temp = TextLib::TimeToText(_Time, True);
	if(_Time < 0)	{
		temp = TextLib::SubString(temp, 2, 7);
		return "-" ^ temp;
	}
	if(_Time < 600000)	{
		temp = TextLib::SubString(temp, 1, 7);
		return temp;
	}
	return temp;
}

main()	{
	Audio.PlaySoundEvent(CAudioManager::ELibSound::Checkpoint, 0, 1.);
	declare Time = {{{_WaypointTime}}};
	declare Time2 = {{{_AnotherTime}}};
	
	(Page.GetFirstChild("cas") as CMlLabel).SetText(TimeToTextMP(Time));
	
	if(Time2 == -1)	
		(Page.GetFirstChild("cas2") as CMlLabel).Hide();

	declare diff = Time - Time2;
	declare Text style;
	if(diff < 0)
		style = "$00F";
	else
		style = "$F00+";	
	(Page.GetFirstChild("cas2") as CMlLabel).SetText("" ^ style ^ TimeToTextMP(diff));
	sleep(1500);
	(Page.GetFirstChild("cas") as CMlLabel).Hide();
	(Page.GetFirstChild("cas2") as CMlLabel).Hide();
}


--></script>
</manialink>
""";
}

Void SaveRecordGhost(CGhost _recordGhost)	{
	DataFileMgr.Replay_Save("PlatformRecords\\AutoSave"^Map.MapInfo.Name^".Replay.Gbx", Map, _recordGhost);
}

CGhost GetRecordGhost()	{
	GhostMgr.Ghost_RemoveAll();
	declare MapGhosts = DataFileMgr.Replay_Load("PlatformRecords\\AutoSave"^Map.MapInfo.Name^".Replay.Gbx");
	wait(MapGhosts.HasSucceeded);
	
	declare MapGhost = MapGhosts.Ghosts[0];
	
	if(MapGhost!=Null)	{
		GhostMgr.Ghost_Add(MapGhost, False);
		return MapGhost;
	}
	return Null;
}

Integer GetMapRecord(CGhost _recordGhost)	{
	if(S_IsPlatform == True || _recordGhost == Null)	{
		if (_recordGhost == Null)
			return -1;
		return _recordGhost.Result.NbRespawns;
	}
	
	return ScoreMgr.Map_GetRecord(NullId, Map.MapInfo.MapUid, "");
}

declare CUILayer G_ChronoLayer;	
declare CUILayer G_CPLayer;
declare CUILayer G_GameplayLayer;
declare CUILayer G_PauseMenuLayer;

declare CGhost G_RecordGhost;
declare Integer G_MapRecord;

***MB_Private_StartServer***
***

ST2::Load();
ST2::SetStyle("LibST_Base");
+++ScoresTable+++
ST2::Build("SM"); 

***

***ScoresTable***
***
// ---------------------------------- //
// Global settings
ST2::SetSize(<164.5, 11.>, <161., 59.5>, <160., 15.5>);
ST2::SetFormat(2, 8);
ST2::SetTextScale(1.1);
ST2::SetBackgroundProperties(<0., 5.>, <200., 100.>);
ST2::SetTeamsScoresVisibility(False);

// ---------------------------------- //
// Columns
ST2::SetColWidth("LibST_Avatar", 2.5);
ST2::SetColWidth("LibST_ManiaStars", 2.);
ST2::SetColWidth("LibST_Tools", 1.5);
ST2::CreateCol("LibST_TMRespawns", "Respawns", "0", 12., 1.);
ST2::CreateCol("LibST_TMBestTime", "BestTime", "-", 15., 2.);

// ---------------------------------- //
// Teams mode
ST2::SetTeamsMode(False);

***

Void PreLoadUI()	{
	UseClans = False;
	UseLaunchedCheckpoints = False;
	UIManager.UIAll.ScoreTableOnlyManialink = True;
	UIManager.UIAll.ScoreTableVisibility = CUIConfig::EVisibility::Normal;
}


Void EndRaceSequence(Text _text, CPlayer _Player)	{
	declare Player_UI = UIManager.GetUI(_Player);
	Player_UI.ScoreTableVisibility = CUIConfig::EVisibility::ForcedVisible;
	Player_UI.UISequence = CUIConfig::EUISequence::Finish;
	Player_UI.BigMessage = _text;
}
	
***Match_InitMap***
***
PreLoadUI();

G_RecordGhost = GetRecordGhost();
G_MapRecord = GetMapRecord(G_RecordGhost);

log("loaded map record: " ^G_MapRecord ^ ", PB Ghost info: " ^ G_RecordGhost);

Scores_ClearAll();
if(S_IsPlatform)
	Scores_SetSortCriteria(CSmMode::ESmScoreSortOrder::Respawns);
else
	Scores_SetSortCriteria(CSmMode::ESmScoreSortOrder::BestRace);


G_ChronoLayer = UIManager.UILayerCreate();
G_CPLayer = UIManager.UILayerCreate();
G_GameplayLayer = UIManager.UILayerCreate();
G_PauseMenuLayer = UIManager.UILayerCreate();

foreach(Player in Players)  {
	declare Integer NbRespawnsRecord for Player;
	
	//	Scores.all.NbRespawnsRequested = 999;
	
	NbRespawnsRecord = 999;

 	declare Player_UI = UIManager.GetUI(Player);
	Player_UI.UILayers.add(G_ChronoLayer); 
	Player_UI.UILayers.add(G_CPLayer); 
	Player_UI.UILayers.add(G_GameplayLayer);
	Player_UI.UILayers.add(G_PauseMenuLayer);

  	G_ChronoLayer.ManialinkPage = DrawChronoUI();
	G_GameplayLayer.ManialinkPage = DrawGameplayTextUI();
	G_PauseMenuLayer.ManialinkPage = PauseMenu();

	G_PauseMenuLayer.Type = CUILayer::EUILayerType::InGameMenu;

}
***

***Match_PlayLoop***
***

declare Player <=> Players[0];
	
declare Boolean IsFinished for Player;
declare Integer NbRespawnsRecord for Player;
declare Integer TimeToUnspawn for Player;
declare Integer cpindex for Player;

declare Player_UI = UIManager.GetUI(Player);
if(Player.StartTime == Now)	{
	IsFinished = False;
	cpindex = 0;	
	Player_UI.BigMessage = "";
}


if (IsFinished && Player != Null) {
	
	if(TimeToUnspawn < Now)	{
		if(Player.StartTime >= Now)	{
			log("why restart");
		}
		else
			UnspawnPlayer(GetPlayer(Player.Login));
		G_RecordGhost = GetRecordGhost();
		IsFinished = False;
	}
	
		
	if(Player.Score != Null) {
		assert(Player.Score.Id != NullId);
	}
}


foreach (Event in PendingEvents) {
	
	// Waypoint
	if (Event.Type == CSmModeEvent::EType::OnPlayerTriggersWaypoint) {
		declare Integer PrevPlayer_Score_NbRespawnsRequested for Event.Player;
		declare Integer cpindex for Event.Player;
		
		cpindex += 1;
		declare BestCPTime = -1;
		
		if(Event.Player.Score.BestRaceTimes.count > cpindex)
			BestCPTime = Event.Player.Score.BestRaceTimes[cpindex-1];
		else
			BestCPTime = -1;
		
  		G_CPLayer.ManialinkPage = UpdateCheckPointUI(Event.WaypointTime, BestCPTime);
		declare Player_UI = UIManager.GetUI(Event.Player);

		if (Event.IsFinish) {
			PassOn(Event);
			
			declare Boolean IsFinished for Event.Player;
			declare Integer TimeToUnspawn for Event.Player;	
			TimeToUnspawn = Now + 2000;
			
			Player_SetCurRaceAsPrevRace(Event.Player);

			if(Event.Player.Score.NbRespawnsRequested <= G_MapRecord || G_MapRecord == -1)	{			 
				declare CurGhost = Ghost_RetrieveFromPlayer(Event.Player);
				log("PB #1! = " ^Event.Player.Score.NbRespawnsRequested);
				Player_SetCurRaceAsBestRace(Event.Player);
				Player_ClearRaceWaypointTimes(Event.Player);
				Player_SetFinishTime(Event.Player, Event.Player.EndTime);	
				EndRaceSequence("Improvement!", Event.Player);

				G_MapRecord = Event.Player.Score.NbRespawnsRequested;
				wait(CurGhost != Null);	
				CurGhost.Result.NbRespawns = G_MapRecord;
				log(CurGhost.Result);
			
				//ScoreMgr.Map_SetNewRecord_v2(NullId, Map.MapInfo.MapUid, "", "", CurGhost);
				SaveRecordGhost(CurGhost);
				DataFileMgr.Ghost_Release(CurGhost.Id);	
				
			}	
			else	{
				EndRaceSequence("Finished", Event.Player);
			}
			
			IsFinished = True;
				
		}
	}
}
***
Void do_nothink()	{
}